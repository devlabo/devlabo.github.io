{"pages":[{"title":"all-categories","text":"","link":"/all-categories/index.html"},{"title":"all-archives","text":"","link":"/all-archives/index.html"},{"title":"all-tags","text":"","link":"/all-tags/index.html"}],"posts":[{"title":"Github blog 시작을 위한 Hexo 설정(Ubuntu 18.04 기준)","text":"HEXO 설치과정Github blog를 시작하기 위해 처음에는 Jekyll을 사용하려고 했으나 생각보다(?) 사용방법이 불편했고 테마도 마음에 들지않아 알아보던 중 Hexo를 많이 사용하는 것 같아서 이번 기회에 설정을 해봤습니다. 01. Hexo설치$ npm install hexo-cli -gloadDep:fsevents → resolv ▌ ╢████████████████████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░╟WARN engine fsevents@2.1.2: wanted: {\"node\":\"^8.16.0 || ^10.6.0 || &gt;=11.0.0\"} (current: {\"node\":\"8.1/usr/local/bin/hexo -&gt; /usr/local/lib/node_modules/hexo-cli/bin/hexo/usr/local/lib└── hexo-cli@3.1.0npm WARN optional Skipping failed optional dependency /hexo-cli/chokidar/fsevents:npm WARN notsup Not compatible with your operating system or architecture: fsevents@2.1.2 nodejs 버전이 낮아서 그런지 경고가 나오는 것 같아서 확인해봤습니다. $ node --versionv8.10.0 8.16.0 이상이 권장인 것 같아 nodejs 버전을 업그레이드 했습니다. 일단 기존 설치되어 있는 nodejs를 삭제하고 $ apt purge --auto-remove nodejs 최신 nodejs로 업그레이드 $ curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -$ sudo apt install -y nodejs$ node --versionv12.16.1 다시한번 Hexo-cli 설치 $ npm install hexo-cli -g --no-optional/usr/bin/hexo -&gt; /usr/lib/node_modules/hexo-cli/bin/hexonpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.1.2 (node_modules/hexo-cli/node_modules/chokidar/node_modules/fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.2: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"linux\",\"arch\":\"x64\"})+ hexo-cli@3.1.0added 74 packages from 319 contributors in 11.895s version에 의한 경고는 사라졌습니다. 02. 기본 프로젝트 생성hexo init 으로 기본 프로젝트 생성합니다. (root계정이라도 npm install 할때 sudo 를 앞에 붙여줘야 정상적으로 설치가 가능했습니다.. 이것때문에 삽질을 좀;) $ hexo init project_name$ cd project_name$ sudo npm install 03. 생성된 블로그 로컬에서 테스트로컬에서 서버를 띄워 만들어진 블로그를 확인해볼 수 있습니다. $ hexo server 서버가 구동되면 브라우저를 통해 접속해볼 수 있습니다. http://localhost:4000 04. github 자동 배포를 위한 설정_config.yaml 파일을 열어 아래 설정을 작성하고 저장합니다. deploy: type: git repo: &lt;&lt;배포할 자신의 github 주소&gt;&gt; branch: master deploy plugin 설치 $ sudo npm install hexo-deployer-git --save github에 배포. -g옵션을 줘야 내부 소스를 통해 리소스를 생성해 배포합니다. $ hexo deploy -g deploy를 통해 배포를 했으나 페이지가 없데이트 되지 않을 경우 clean 이후 다시 배포를 해봅니다. $ hexo clean$ hexo deploy -g","link":"/2020/03/08/hexo-setting/"},{"title":"Microsoft Ergonomic Mouse 개봉기","text":"마이크로소프트 에고노믹 마우스 개봉기기존에 로지텍 MX Master를 사용중이었는데 마우스가 원인인지 아닌지 모르겠지만 요즘따라 너무 손목이 아파서 고민하던 와중 마이크로소프트 에고노믹 마우스가 평이 매우 좋아서 구매를 하게 되었습니다. 에고노믹 마우스도 두가지가 있던데 둥글둥글한 스컬프트 에고노믹 마우스가 있고 이번에 구매한 에고노믹 마우스가 있었습니다. 가격은 좀 나가지만 그래도 최근에 나온게 좋겠지 싶어서 최신상품으로 구매했습니다. 맨 처음 박스를 꺼낸 느낌은 “가볍다!” 였습니다. 박스 무게를 포함해도 MX Master보다 가벼웠던 것 같습니다. 간편하게 뜯을 수 있도록 포장을 해놓은것이 뭔가 고급스러워(?) 보였습니다. 패키지를 열면 마우스와 마우스가 잘 고정될 수 있도록 윗부분에 박스로 마감을 해놓은 모습이 보입니다.박스 윗부분에 뭔가 들어있나 싶었는데 아무것도 없더라구요.. 무광 재질이 정말 고급스러워 보입니다. 마우스는 정말 심플합니다. 그래서 더 마음에 드네요. 마우스를 박스에서 꺼낼때도 “가볍다.. 진짜…”. 맨날 무거운 마우스만 사용해서 더 그렇게 느꼈던 것 같습니다. 아무래도 유선이기 때문에 배터리같은게 없으니 더 그럴만도 합니다. 휠부분은 금속 재질로 되어있어서 고급스러워보입니다. 센서 부분은 파란색으로 빛납니다.블루트랙 센서가 여러가지 재질의 바닥에서 사용이 가능하다고 하던데 시험삼에 핸드폰 액정 위에 올려놓고 써봐도 마우스가 튀거나 하지 않았습니다. 패드없이 아무곳에서나 사용해도 크게 불편함은 없을 것 같습니다. 무엇보다 가벼워서 손이 너무 편한 느낌입니다. 마우스도 바꿨으니 지긋지긋한 손목통증이 좀 없어졌으면 좋겠습니다.","link":"/2020/03/12/Microsoft-Ergonomic/"},{"title":"TB3000A (썬더볼트3 NVMe 외장 케이스) 개봉기","text":"기존 데스크탑은 Openstack 설치에 활용하기 위해 새로 구입한 맥북에 Windows를 설치 하려고 하던 중, 왠지 맥북에 Windows공간을 만드는 것이 아까워서 외장하드에 설치해볼까 해서 구매한 제품입니다. 결론적으론 아직도 설치를 못하고 삽질 중인데 ㅠㅠ 언젠간 해결이 됐으면 좋겠습니다. (맥북프로 16인치 이후 버전부터 드라이버가 이상한건지 구성이 잘 안되네요.. 혹시 성공하신분 있으시면 알려주세요 ㅠㅠ) 삼성 970Evo와 외장 케이스입니다. 썬더볼트 타입이기 때문에 성능은 잘 나오겠죠? 하지만 usb-c와 호환은 안됍니다. 외장 케이스 박스 오픈… 구성품은 파우치, 케이블, 외장케이스, 드라이버, 그리고 허술해보이는 방열판과 써멀패드가 들어있었습니다. 드라이버는 옛날에 안경 볼트 조이라고 주던 그 드라이버입니다.손에 맞지도 않고 품질도 별로라 바로 버려버리고 집에 있는 드라이버로 작업했네요. 뚜껑을 편하게 열 수 있도록 스티커가 붙어있습니다. 이건 보고 경악을 금치 못했는데, 고정할 수 있게 볼트를 조이는곳어 없이 그냥 덮으라는건가? ssd 개봉 모습입니다. 심플합니다. 외장하드 케이스 뚜껑을 열어서 SSD를 잘 넣고 누른다음 위에 고정되도록 볼트만 조여주면 장착이 끝납니다. 뚜껑을 덮기 전 잘 작동하는지 확인을 해보고.. 허술한 껌딱지를 붙여주고 허술한 방열판을 그 위에 올려줍니다. 혹시나 방열판이 보드쪽에 밀려서 합선이 일어날까 걱정했는데 케이스 뚜껑을 덮으면 그런일은 일어나지 않을 것 같습니다. 근데 너무 허술합니다. 케이스 뚜껑을 덮고 고정을 위해 볼트를 조여줍니다. 손 끝에 모든 감각을 동원해 토크 조절을 해야합니다. 조금이라도 힘을 더 줘서 돌리면 나사가 헛돌게 됩니다. 성능은 잘 나오는 것 같지만 생각보단 제품이 너무 허술해서 실망했네요. 이상 개봉기였습니다.","link":"/2020/03/25/TB3000A/"},{"title":"AWS Redshift Spectrum 정리","text":"Redshift Spectrum 정리01. Redshift Spectrum Schma 생성 스팩트럼을 사용하기 위한 Schema 생성create external schema spectrum from data catalog database 'spectrumdb' iam_role 'arn:aws:iam::123456789012:role/mySpectrumRole'create external database if not exists; 기존에 생성되어있던 Glue 카탈로그를 활용하여 생성도 가능함.create external schema spectrum_schema from data catalog database 'spectrum_db' iam_role 'arn:aws:iam::123456789012:role/MySpectrumRole'create external database if not exists; EMR같은 Hive 메타스토어를 사용하는 데이터 카탈로그를 참조하는 외부스키마 생성create external schema hive_schemafrom hive metastoredatabase 'hive_db'uri '172.10.10.10' port 99iam_role 'arn:aws:iam::123456789012:role/MySpectrumRole' 02. external table 생성 데이터가 있는 S3 버킷 경로를 지정하여 external table 생성create external table spectrum.sales(salesid integer,listid integer,sellerid integer,buyerid integer,eventid integer,dateid smallint,qtysold smallint,pricepaid decimal(8,2),commission decimal(8,2),saletime timestamp)row format delimitedfields terminated by '\\t'stored as textfilelocation 's3:// &lt;&lt; bucket 경로 &gt;&gt;'table properties ('numRows'='172000'); parquet file 경로를 지정하여 external table 생성create external table spectrum.sales(salesid integer,listid integer,sellerid integer,buyerid integer,eventid integer,dateid smallint,qtysold smallint,pricepaid decimal(8,2),commission decimal(8,2),saletime timestamp)row format delimitedfields terminated by '\\t'stored as parquetlocation 's3:// &lt;&lt; bucket 경로 &gt;&gt;' 03. 외부 테이블 파티셔닝 단일 파티션 분할alter table spectrum.sales_part addpartition(saledate='2008-01-01') location 's3://awssampledbuswest2/tickit/spectrum/sales_partition/saledate=2008-01/'partition(saledate='2008-02-01') location 's3://awssampledbuswest2/tickit/spectrum/sales_partition/saledate=2008-02/'; 여러 파티션 분할create external table spectrum.sales_event(salesid integer,listid integer,sellerid integer,buyerid integer,eventid integer,dateid smallint,qtysold smallint,pricepaid decimal(8,2),commission decimal(8,2),saletime timestamp)partitioned by (salesmonth char(10), event integer)row format delimitedfields terminated by '|'stored as textfilelocation 's3://awssampledbuswest2/tickit/spectrum/salesevent/'table properties ('numRows'='172000');-- 파티션을 추가하려면 alter table을 이용alter table spectrum.sales_event addpartition(salesmonth='2008-01', event='101') location 's3://awssampledbuswest2/tickit/spectrum/salesevent/salesmonth=2008-01/event=101/'partition(salesmonth='2008-01', event='102') location 's3://awssampledbuswest2/tickit/spectrum/salesevent/salesmonth=2008-01/event=102/'partition(salesmonth='2008-01', event='103') location 's3://awssampledbuswest2/tickit/spectrum/salesevent/salesmonth=2008-01/event=103/'partition(salesmonth='2008-02', event='101') location 's3://awssampledbuswest2/tickit/spectrum/salesevent/salesmonth=2008-02/event=101/'partition(salesmonth='2008-02', event='102') location 's3://awssampledbuswest2/tickit/spectrum/salesevent/salesmonth=2008-02/event=102/'partition(salesmonth='2008-02', event='103') location 's3://awssampledbuswest2/tickit/spectrum/salesevent/salesmonth=2008-02/event=103/'partition(salesmonth='2008-03', event='101') location 's3://awssampledbuswest2/tickit/spectrum/salesevent/salesmonth=2008-03/event=101/'partition(salesmonth='2008-03', event='102') location 's3://awssampledbuswest2/tickit/spectrum/salesevent/salesmonth=2008-03/event=102/'partition(salesmonth='2008-03', event='103') location 's3://awssampledbuswest2/tickit/spectrum/salesevent/salesmonth=2008-03/event=103/'; 04. Select data 가상 열 조회select distinct \"$path\", \"$size\"from spectrum.sales_part; $path | $size---------------------------------------+-------s3://awssampledbuswest2/tickit/spectrum/sales_partition/saledate=2008-01/ | 1616s3://awssampledbuswest2/tickit/spectrum/sales_partition/saledate=2008-02/ | 1444s3://awssampledbuswest2/tickit/spectrum/sales_partition/saledate=2008-03/ | 1644","link":"/2020/04/07/AWS-Redshift-Spectrum/"},{"title":"01-Openstack설치를 위한 OS환경 구성(Ubuntu 18.04)","text":"Openstack 설치를 위한 사전 설정(Ubuntu 18.04)01. Openstack Compute node setting1) os파티션 작업lvmdiskscan 명령어를 실행해 disk volume 확인 $ lvmdiskscan /dev/nvme0n1 [ 27.25 GiB] /dev/loop0 [ &lt;89.09 MiB] /dev/ubuntu-vg/ubuntu-lv [ 4.00 GiB] /dev/nvme2n1 [ 465.76 GiB] /dev/loop1 [ &lt;91.37 MiB] /dev/nvme1n1 [ &lt;476.94 GiB] /dev/nvme1n1p1 [ 512.00 MiB] /dev/nvme1n1p2 [ 1.00 GiB] /dev/nvme1n1p3 [ &lt;475.44 GiB] LVM physical volume 1 disk 7 partitions 0 LVM physical volume whole disks 1 LVM physical volume -l 옵션을 사용하면 연관된 device만 보여줌 $ lvmdiskscan -l WARNING: only considering LVM devices /dev/nvme1n1p3 [ &lt;475.44 GiB] LVM physical volume 0 LVM physical volume whole disks 1 LVM physical volume 총 SSD 용량중에 ubuntu-lv로 4G만 할당 되어 있습니다. $ pvscan PV /dev/nvme1n1p3 VG ubuntu-vg lvm2 [475.43 GiB / 471.43 GiB free] Total: 1 [475.43 GiB] / in use: 1 [475.43 GiB] / in no VG: 0 [0 ] $ pvs PV VG Fmt Attr PSize PFree /dev/nvme1n1p3 ubuntu-vg lvm2 a-- 475.43g 471.43g$ lvs LV VG Attr LSize Pool Origin Data% Meta% Move Log Cpy%Sync Convert ubuntu-lv ubuntu-vg -wi-ao---- 4.00g $ lvresize -L +471G --resizefs /dev/mapper/ubuntu--vg-ubuntu--lv Size of logical volume ubuntu-vg/ubuntu-lv changed from 4.00 GiB (1024 extents) to 475.00 GiB (121600 extents). Logical volume ubuntu-vg/ubuntu-lv successfully resized.resize2fs 1.44.1 (24-Mar-2018)Filesystem at /dev/mapper/ubuntu--vg-ubuntu--lv is mounted on /; on-line resizing requiredold_desc_blocks = 1, new_desc_blocks = 60The filesystem on /dev/mapper/ubuntu--vg-ubuntu--lv is now 124518400 (4k) blocks long. lvresize를 통해 남은 용량을 vg에 할당해줍니다. 2) hostname 및 ip설정ubuntu 18.04에선 hostnamectl로 hostname을 변경한 이후 적용이 안되는 경우가 있습니다. 그럴 경우 아래와 같이 호스트 네임 변경 권한을 줘야 합니다. $ vi /etc/cloud/cloud.cfg...# This will cause the set+update hostname module to not operate (if true)preserve_hostname: true # 이 부분을 false -&gt; true로 변경...$ hostnamectl set-hostname os_controller ip주소를 아래와 같은 방법으로 변경 $ cd /etc/netplan/$ ls50-cloud-init.yaml$ vi 50-cloud-init.yamlnetwork: ethernets: ens3: addresses: - 192.168.1.80/24 gateway4: 192.168.1.1 nameservers: addresses: - 192.168.1.1 version: 2 설정할 ip주소를 입력하고 저장한 뒤 적용 $ sudo netplan apply","link":"/2020/04/07/01-Openstack-ubuntu/"},{"title":"nvidia JETSON NANO, JetBot AI Kit 개봉기","text":"아이언맨의 자비스와 유사하게 짭비스를 만들어보기 위해 작년 11월에 Jetson Nano, JetBot AI Kit을 구매 했습니다. 원래 처음 목표는 특정 사람 얼굴을 인식해서 따라다니고, 간단한 명령을 내리면 수행해주는 정도를 만들어보고 싶었는데요, JetBot AI Kit가 불량품이 와서 Jetson Nano만 가지고 놀았는데 얼마후 삼성에서 ‘볼리’라는걸 출시 했네요. 내가 만들고 싶었던걸 더 작고 이쁘게 만든 제품이 나왔네요 ㅠㅠ 그래도 만들어볼까 했던 것이 시제품으로 나왔다는 뿌듯함과 역시 내가 생각한건 세상에 존재한다는 진리를 다시한번 깨닫고 개봉기를 작성합니다. 이건 카메라 켜는것도 귀찮아서 폰카로 찍었었네요 (…) Jetson NANO Developer Kit 입니다. 박스가 생각보다 작았습니다. 크기는 라즈베리파이보다 약간 큰것같네요. 큰 박스는 JetBot AI Kit입니다. Jetson NANO를 18650배터리 3개를 넣어서 Jetson NANO를 장착해서 사용하는 제품입니다. Kit에 Jetson Nano용 주변기기가 포함되어있습니다. 카메라와 WiFi모듈도 같이 포함되어 있고 블루투스 연결용 동글이도 있어서 블루투스 컨트롤러를 연결해 조종할 수 있습니다. Jetson에 연결할 WiFi 모듈입니다. 기타 나머지 조립에 필요한 부품들은 알루미늄 케이스 안에 있습니다. 바퀴를 구동하기 위한 모터 배터리 및 상태를 확인할 수 있는 작은 LED화면이 보입니다. Jetson NANO 박스를 열어봅니다.작은 상자 안에 고급스러운 비닐에 포장되어 있습니다. 박스를 접어서 그 위에 NANO 기판을 올려놓을 수 있다네요. 일단 Jetson NANO를 올려놓기 위해 JetBot 조립을 마저 합니다. 아래 WiFi용 안테나를 설치할 수 있는 슬롯도 연결 합니다. 실제 Jetson NANO는 저 작은 기판만 있으면 동작이 가능한 것 같습니다. 향후 다른 보드에도 장착이 가능한 구조 같습니다. WiFi 모듈을 장창하고 안테나 선을 연결해줍니다. 사실 이 사진은 안테나 선을 연결 안하고 Jetson NANO를 장착한 이후 다시 풀어서 찍은 사진입니다. (ㅠㅠ) 이렇게 JetBot 위에 올려주고 Jetson NANO 모듈을 장착해주면 됩니다. 안테나선 어쩔.. JetBot은 불량이었지만 Jetson은 다행히 잘 작동합니다. 구동할때 발열이 심하다고 해서 별도 쿨러를 구매하였습니다. 방열판 구멍과 잘 안맞아서 장착에 애를 먹긴 했지만 잘 장착 했습니다. 처음에 쿨러가 안돌아서 이것도 불량인가 싶었는데 발열이 없을때는 쿨러가 동작을 안하더라구요. Jetson에 접속해 명령어 한줄 날려주면 잘 돌아가는지 확인할 수 있습니다. 옆에는 Openstack Controller node용으로 샀던.. 나에게 실망감을 안겨준 라떼판다입니다.제가 너무 많은걸 바란 것이겠죠.. 이상 Jetson NANO, JetBot 개봉기였습니다.","link":"/2020/04/07/nvidia-JETSON-NANO-Review/"},{"title":"Redshift table lock관련 가이드","text":"01. Redshift Lock leve AccessExclusiveLock: ALTER TABLE, DROP 또는 TRUNCATE와 같은 DDL 작업 중에 주로 획득. AccessExclusiveLock은 다른 모든 잠금 시도를 차단. AccessShareLock: UNLOAD, SELECT, UPDATE 또는 DELETE 작업 중에 획득. AccessShareLock은 AccessExclusiveLock 시도만 차단. AccessShareLock은 테이블에서 읽기 또는 쓰기를 시도하는 다른 세션을 차단하지 않음. ShareRowExclusiveLock: COPY, INSERT, UPDATE 또는 DELETE 작업 중에 획득. ShareRowExclusiveLock은 AccessExclusiveLock 및 기타 ShareRowExclusiveLock 시도를 차단하지만, AccessShareLock 시도는 차단하지 않음. 02. Blocking 방지 가이드 ExclusiveLock (X-LOCK)을 유발하는 DDL 구문이 포함된 트랜잭션은 짧게 유지. 혹은 하나의 프로시저에 DDL 구문과 DML 작업이 함께 존재하는 경우, 개별 트랜잭션으로 분리하는 것도 방법. 대량의 INSERT/UPDATE/DELETE는 스테이징 테이블을 활용한 UPSERT, ALTER TABLE APPEND 구문 사용을 권장. 쿼리 실행 시간 기준 TOP 10 쿼리나, 아래의 Lock을 유발하는 쿼리의 실행 시간을 줄이기 위한 튜닝 필요 03. Lock모니터링 아래 쿼리를 실행하여 현재 Lock으로 인한 WAIT이 발생하고 있는지, Blocking을 유발하는 X-LOCK 쿼리가 있는지 확인 가능. select a.txn_owner , a.txn_db , a.xid , a.pid , a.txn_start , a.lock_mode , a.relation as table_id , nvl(trim(c.\"name\"),d.relname) as tablename , a.granted,b.pid as blocking_pid , datediff(s,a.txn_start,getdate())/86400||' days'||datediff(s,a.txn_start,getdate())%86400/3600||' hrs'||datediff(s,a.txn_start,getdate())%3600/60||' mins'||datediff(s,a.txn_start,getdate())%60||' secs' as txn_durationfrom svv_transactions a left join (select pid,relation,granted from pg_locks group by 1,2,3) b on a.relation=b.relation and a.granted='f' and b.granted='t' left join (select * from stv_tbl_perm where slice=0) c on a.relation=c.id left join pg_class d on a.relation=d.oidwhere a.relation is not null; 간단히 트랜젝션 상세 정보를 제외한 Lock정보도 확인 가능 SELECT current_time , c.relname , l.database , l.transaction , l.pid , a.usename , l.mode , l.grantedFROM pg_locks l JOIN pg_catalog.pg_class c ON c.oid = l.relation JOIN pg_catalog.pg_stat_activity a ON a.procpid = l.pidWHERE l.pid &lt;&gt; pg_backend_pid(); 이후 X-LOCK이 발생한 쿼리를 kill하여 WAIT을 해제할 수 있음 select pg_terminate_backend(PID);","link":"/2020/04/09/Redshift-Lock/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"nodejs","slug":"nodejs","link":"/tags/nodejs/"},{"name":"Microsoft","slug":"Microsoft","link":"/tags/Microsoft/"},{"name":"Mouse","slug":"Mouse","link":"/tags/Mouse/"},{"name":"Ergonomic","slug":"Ergonomic","link":"/tags/Ergonomic/"},{"name":"TB3000A","slug":"TB3000A","link":"/tags/TB3000A/"},{"name":"Thunderbolt3","slug":"Thunderbolt3","link":"/tags/Thunderbolt3/"},{"name":"nvme","slug":"nvme","link":"/tags/nvme/"},{"name":"AWS","slug":"AWS","link":"/tags/AWS/"},{"name":"Redshift","slug":"Redshift","link":"/tags/Redshift/"},{"name":"Spectrum","slug":"Spectrum","link":"/tags/Spectrum/"},{"name":"parquet","slug":"parquet","link":"/tags/parquet/"},{"name":"OpenStack","slug":"OpenStack","link":"/tags/OpenStack/"},{"name":"Ubuntu","slug":"Ubuntu","link":"/tags/Ubuntu/"},{"name":"Jetson","slug":"Jetson","link":"/tags/Jetson/"},{"name":"JetBot","slug":"JetBot","link":"/tags/JetBot/"},{"name":"nvidia","slug":"nvidia","link":"/tags/nvidia/"},{"name":"Lock","slug":"Lock","link":"/tags/Lock/"}],"categories":[{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"개봉기","slug":"개봉기","link":"/categories/%EA%B0%9C%EB%B4%89%EA%B8%B0/"},{"name":"AWS","slug":"AWS","link":"/categories/AWS/"},{"name":"Redshift","slug":"AWS/Redshift","link":"/categories/AWS/Redshift/"},{"name":"Openstack","slug":"Openstack","link":"/categories/Openstack/"}]}