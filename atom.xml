<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Megapost</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://megapost.io/"/>
  <updated>2020-07-18T16:11:23.572Z</updated>
  <id>https://megapost.io/</id>
  
  <author>
    <name>Deviroid</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>01.ArangoDB 설치 및 python에서 사용</title>
    <link href="https://megapost.io/2020/07/19/01-install-arangodb/"/>
    <id>https://megapost.io/2020/07/19/01-install-arangodb/</id>
    <published>2020-07-18T16:09:23.000Z</published>
    <updated>2020-07-18T16:11:23.572Z</updated>
    
    <content type="html"><![CDATA[<p>GraphDB 공부도 해볼겸 업무에 적용해 보려고 계획하던 중 친구에게 ArangoDB라는 것을 듣게 되었습니다.</p><p>보통 GraphDB로 많이 사용하는 것은 neo4j나 카카오의 S2Graph정도만 들어봤었는데 ArangoDB는 뭔가 이름부터 신선해서 사용해 보기로 했습니다.</p><p>회사에서 AWS를 사용하지만 EC2를 생성하는데 제약(?)이 있어서 기존에 사용하던 개발기에 Docker를 통해 설치해보기로 했습니다.</p><a id="more"></a><h2 id="01-ArangoDB-설치하기"><a href="#01-ArangoDB-설치하기" class="headerlink" title="01.ArangoDB 설치하기"></a>01.ArangoDB 설치하기</h2><p>Docker를 이용해 아래 명령으로 간단하게 설치가 완료 됩니다.</p><blockquote><p>docker run -p 8529:8529 -e ARANGO_ROOT_PASSWORD=… \<br>    -v /data/arangodb/data:/var/lib/arangodb3 \<br>    -v /data/arangodb/app:/var/lib/arangodb3-app \<br>    -d arangodb/arangodb:3.6.4</p></blockquote><p>DB사용에 필요한 데이터는 로컬디스크로 마운트 시켜줬습니다.</p><p>이제 웹으로 docker container 생성 시 지정한 포트로 접속할 수 있습니다.</p><p><img src="/images/arangodb/arangodb_001.png" alt=""></p><p>기본 user는 root이고 password는 docker생성시 지정했던 패스워드입니다.</p><p><img src="/images/arangodb/arangodb_002.png" alt=""></p><p>DB를 select해줍니다. 최초 접속 시 db는 _system만 존재합니다.</p><p><img src="/images/arangodb/arangodb_003.png" alt=""></p><p>DB를 컨트롤 할 수 있는 다양한 매뉴들이 보입니다.</p><h2 id="02-Python모듈-설치-및-샘플-데이터-넣기"><a href="#02-Python모듈-설치-및-샘플-데이터-넣기" class="headerlink" title="02. Python모듈 설치 및 샘플 데이터 넣기"></a>02. Python모듈 설치 및 샘플 데이터 넣기</h2><p>ArangoDB 공홈에서 python사용 가이드를 제공하고 있습니다.<br><a href="https://www.arangodb.com/tutorials/tutorial-python/">https://www.arangodb.com/tutorials/tutorial-python/</a></p><p>아래 python 연동 방법은 공홈 가이드와 동일합니다.</p><p>python에서 arangodb를 사용하기 위해서는 pyarango모듈을 설치하면 됩니다.</p><blockquote><p>pip install pyarango</p></blockquote><ul><li>arango connection</li></ul><blockquote><p>&gt;&gt;&gt; from pyArango.connection import *<br>&gt;&gt;&gt; conn = Connection(username=”root”, password=””)</p></blockquote><ul><li>Creating and Opening Databases</li></ul><p>“school”이라는 Database를 새로 생성합니다.</p><blockquote><p>db = conn.createDatabase(name=”school”)</p></blockquote><p>만약 기존에 사용하고 있던 Database가 있다고 하면 아래와 같이 사용할 데이터베이스를 지정해주면 됩니다.</p><ul><li><p>Opening database</p><blockquote><p>&gt;&gt;&gt; db = conn[“school”]<br>db<br>ArangoDB database: school</p></blockquote></li><li><p>Creating Collections<br>Collection은 Arangodb에서 사용하는 Document와 Edge의 그룹입니다.</p></li></ul><blockquote><p>&gt;&gt;&gt; studentsCollection = db.createCollection(name=”Students”)<br>&gt;&gt;&gt; db[“Students”]<br>ArangoDB Collection name: Students, id: 202, type: document, status loaded</p></blockquote><ul><li>Creating Documents</li></ul><blockquote><p>&gt;&gt;&gt; doc1 = studentsCollection.createDocument()<br>&gt;&gt;&gt; doc1[“name”] = “John Smith”<br>&gt;&gt;&gt; doc1<br>ArangoDoc ‘None’: {‘name’: ‘John Smith’}<br>&gt;&gt;&gt; doc2 = studentsCollection.createDocument()<br>&gt;&gt;&gt; doc2[“firstname”] = “Emily”<br>&gt;&gt;&gt; doc2[“lastname”] = “Bronte”<br>&gt;&gt;&gt; doc2<br>ArangoDoc ‘None’: {‘firstname’: ‘Emily’, ‘lastname’: ‘Bronte’}</p></blockquote><p>json형태의 document를 만들고 _key를 지정한 후 저장합니다.</p><blockquote><p>&gt;&gt;&gt; doc1._key = “johnsmith”<br>&gt;&gt;&gt; doc1.save()<br>&gt;&gt;&gt; doc1<br>ArangoDoc ‘Students/johnsmith’: {‘name’: ‘John Smith’}</p></blockquote><p>데이터를 저장하는 방법까지 배웠으니 다음에는 실 운영 데이터를 마이그레이션 해보려고 합니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GraphDB 공부도 해볼겸 업무에 적용해 보려고 계획하던 중 친구에게 ArangoDB라는 것을 듣게 되었습니다.&lt;/p&gt;
&lt;p&gt;보통 GraphDB로 많이 사용하는 것은 neo4j나 카카오의 S2Graph정도만 들어봤었는데 ArangoDB는 뭔가 이름부터 신선해서 사용해 보기로 했습니다.&lt;/p&gt;
&lt;p&gt;회사에서 AWS를 사용하지만 EC2를 생성하는데 제약(?)이 있어서 기존에 사용하던 개발기에 Docker를 통해 설치해보기로 했습니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="GraphDB" scheme="https://megapost.io/categories/GraphDB/"/>
    
      <category term="ArangoDB" scheme="https://megapost.io/categories/GraphDB/ArangoDB/"/>
    
    
      <category term="GraphDB" scheme="https://megapost.io/tags/GraphDB/"/>
    
      <category term="ArangoDB" scheme="https://megapost.io/tags/ArangoDB/"/>
    
  </entry>
  
  <entry>
    <title>Ender-5 Pro BLtouch(오토레벨링센서) 설치</title>
    <link href="https://megapost.io/2020/06/17/ender5-bltouch/"/>
    <id>https://megapost.io/2020/06/17/ender5-bltouch/</id>
    <published>2020-06-16T23:58:27.000Z</published>
    <updated>2020-06-17T00:33:20.160Z</updated>
    
    <content type="html"><![CDATA[<p>Ender-5 가 레벨링은 그나마 하기 쉬운편이라고는 하나 4군데 레벨링을 하다 보면 가운데가 안맞고, 다시 이곳저곳 조절하다보니 너무 불편한 것 같아 오토레벨링 센서를 장착 했습니다.</p><p>Ender-3는 국내에 BLtouch를 장착해서 판매하는 곳도 있는데 Ender-5는 Plus모델에만 장착해서 나오는 것 같습니다.<br>(이럴꺼면 그냥 Plus모델을 구매할껄 그랬네요…)</p><p>BLtouch 장착 역시 아래 유투브를 참고해서 진행 했습니다. (이 유투버 아저씨 이제는 친숙하네요)</p><a id="more"></a><p><a href="http://youtube.com/watch?v=iAz47riSjLQ">http://youtube.com/watch?v=iAz47riSjLQ</a></p><p>BLTouch 구매시 연장케이블이 있는 제품을 구매하는 것이 좋습니다. 저는 모르고 샀다가 직접 전선 연장했습니다.</p><p>장착 가이드는 들어있는 제품을 구매하셔도 되고 직접 출력하셔도 됩니다.<br><a href="https://www.thingiverse.com/thing:3383611">https://www.thingiverse.com/thing:3383611</a></p><p>그리고 아래 이미지와 같은 pin27 board가 있으면 장착하기 더 쉽습니다. (아니면 납땜 하셔야 합니다..)<br>국내에도 팔긴 하나 알리가 저렴해서 시간에 여유가 있으시면 알리에서 구매하는걸 추천 드립니다.</p><p><img src="/images/20200617-ender5-bltouch/2.jpg" alt=""></p><p>BLtouch 장착 시 유의할 점은 pin27 board에 BLtouch 선 연결 시 5V, GND, SIG 위치를 잘 보고 연결 하셔야합니다. Board에 따라서 위치가 조금씩 다르기 때문에 위치 조절을 해줘야 합니다. (해당 부분도 youtube에 나옵니다. 여러번 확인하라는 멘트와 함께..)</p><p>그리고 board에 연결한 검은색/흰색 선도 방향이 틀리면 센서가 동작하지 않습니다. 꼭 원래 연결되어있던 센서 선을 확인하시고 거기에 맞게 연결 해주셔야합니다.</p><p><img src="/images/20200617-ender5-bltouch/1.jpg" alt=""></p><ul><li>BLtouch 장착 시 가장 힘들었던 부분</li></ul><p>장착이 완료되었으면 펌웨어 수정이 필요합니다. </p><p>수정 역시 youtube 영상을 그대로 따라하시면 됩니다.</p><p>소스에서 BLtouch를 활성화 하면 아마 펌웨어 업로드 시 용량이 부족하다고 나옵니다. 그래서 일부 기존에 있던 기능을 비활성화 해야합니다. 이 역시 youtube영상을 잘 참고하시면 됩니다.</p><p>그리고 꼭 슬라이서에서 G코드 추가 하는 부분도 하셔야 오토레벨링(9군데를 콕콕)이 작동합니다. 이것도 영상에 있는데 별거 아닌줄알고 빼먹었다가 가운데만 레벨링해서 BLtouch에 실망했던 적이 있습니다.</p><p>모든 설정이 완료되면 프린터 전원을 넣고 Auto home을 선택하고 BLtouch센서를 건들여서 센서가 잘 동작하는지 꼭 확인합니다.<br>센서가 동작 안해서 베드를 긁어먹는 사례가 많이 있습니다.</p><p>센서까지 잘 동작되는 것을 확인하면 가운데 기준으로 수동으로 레벨링을 해줍니다. BLtouch 장착 후 펌웨어 수정 작업을 하면 프린터 메뉴에서 베드를 위아래로 움직이며 레벨링이 가능합니다. 가운데 레벨링만 해주면 나머지 부분은 출력 전 프린터에서 알아서 레벨링을 해줍니다.</p><p>이렇게 하면 모든 설정이 완료됩니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ender-5 가 레벨링은 그나마 하기 쉬운편이라고는 하나 4군데 레벨링을 하다 보면 가운데가 안맞고, 다시 이곳저곳 조절하다보니 너무 불편한 것 같아 오토레벨링 센서를 장착 했습니다.&lt;/p&gt;
&lt;p&gt;Ender-3는 국내에 BLtouch를 장착해서 판매하는 곳도 있는데 Ender-5는 Plus모델에만 장착해서 나오는 것 같습니다.&lt;br&gt;(이럴꺼면 그냥 Plus모델을 구매할껄 그랬네요…)&lt;/p&gt;
&lt;p&gt;BLtouch 장착 역시 아래 유투브를 참고해서 진행 했습니다. (이 유투버 아저씨 이제는 친숙하네요)&lt;/p&gt;
    
    </summary>
    
    
      <category term="3dprinter" scheme="https://megapost.io/categories/3dprinter/"/>
    
    
      <category term="3dprinter" scheme="https://megapost.io/tags/3dprinter/"/>
    
      <category term="BLtouch" scheme="https://megapost.io/tags/BLtouch/"/>
    
      <category term="오토레벨링" scheme="https://megapost.io/tags/%EC%98%A4%ED%86%A0%EB%A0%88%EB%B2%A8%EB%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>Ender-5 Pro marlin 1.1.9 펌웨어 업그레이드 및 Z축 문제 해결</title>
    <link href="https://megapost.io/2020/06/17/ender5-marlin/"/>
    <id>https://megapost.io/2020/06/17/ender5-marlin/</id>
    <published>2020-06-16T22:58:27.000Z</published>
    <updated>2020-06-16T23:27:15.742Z</updated>
    
    <content type="html"><![CDATA[<p>Ender-5 Pro Z축 문제는 3D프린터 카페나 Reddit에 단골처럼 등장하는 문제였는데 댓글을 확인해도 생각보다 정확한 답변을 달아주는 사람이 없었습니다.<br>그래도 어찌어찌 검색해서 해외에서 비슷한 사례를 찾아 냈고 Z-STEP값 조정으로 해결했다는 글을 봤습니다.</p><p>바로 프린터로 가서 Z축을 30cm 아래로 이동시켰더니 15cm만 내려가는 걸 보고 이 문제가 확실하다고 생각 했습니다.</p><a id="more"></a><p>해결하는 방법은 두가지가 있는데</p><p>1) 프린터 설정에 들어가서 Z-STEP값을 400-&gt;800으로 변경<br>2) 펌웨어에서 기본값을 400-&gt;800으로 변경</p><p>펌웨어도 공부해볼겸 두 번째 방법으로 진행을 했습니다. 펌웨어 업그레이드방법은 youtube를 참고 했습니다. (<a href="http://youtube.com/watch?v=aQlg9zuxCvM&amp;t=">http://youtube.com/watch?v=aQlg9zuxCvM&amp;t=</a>)<br>펌웨어 업그레이드를 진행하기 위해선 아래 파일들이 필요합니다.</p><p>Arduino IDE: <a href="https://www.arduino.cc/en/main/software">https://www.arduino.cc/en/main/software</a><br>Marlin firmware download: <a href="http://marlinfw.org/meta/download/">http://marlinfw.org/meta/download/</a><br>Ender 5 Marlin Configuration files: <a href="https://gumroad.com/l/eolzc">https://gumroad.com/l/eolzc</a></p><p>위 영상은 ender-5 silence board가 아니라서 펌웨어 업그레이드 시 아두이노가 필요한데 silence board의 경우 아두이노는 필요 없습니다. </p><p>silence board 업그레이드 방법 및 설정은 아래 사이트에 자세히 나와있습니다.</p><p><a href="https://www.reddit.com/r/ender5/comments/czz2ye/guide_how_to_use_the_creality_v115_board_with_the/">https://www.reddit.com/r/ender5/comments/czz2ye/guide_how_to_use_the_creality_v115_board_with_the/</a></p><p>소스에 유투버가 올려준 설정파일을 덮어쓰고 아두이노IDE를 불러온 후 Configuration.h 파일을 열어 아래 수치를 찾아 변경해줍니다.</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Default Axis Steps Per Unit (steps/mm)</span></span><br><span class="line"><span class="comment"> * Override with M92</span></span><br><span class="line"><span class="comment"> *                                      X, Y, Z, E0 [, E1[, E2[, E3[, E4]]]]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// #define DEFAULT_AXIS_STEPS_PER_UNIT   &#123; 80, 80, 400, 93 &#125; 400-&gt;800으로 조정</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEFAULT_AXIS_STEPS_PER_UNIT   &#123; 80, 80, 800, 93 &#125;</span></span><br></pre></td></tr></table></figure><p>펌웨어를 프린터에 업로드 해주면 정상적으로 출력 되는 것을 확인할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ender-5 Pro Z축 문제는 3D프린터 카페나 Reddit에 단골처럼 등장하는 문제였는데 댓글을 확인해도 생각보다 정확한 답변을 달아주는 사람이 없었습니다.&lt;br&gt;그래도 어찌어찌 검색해서 해외에서 비슷한 사례를 찾아 냈고 Z-STEP값 조정으로 해결했다는 글을 봤습니다.&lt;/p&gt;
&lt;p&gt;바로 프린터로 가서 Z축을 30cm 아래로 이동시켰더니 15cm만 내려가는 걸 보고 이 문제가 확실하다고 생각 했습니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="3dprinter" scheme="https://megapost.io/categories/3dprinter/"/>
    
    
      <category term="3dprinter" scheme="https://megapost.io/tags/3dprinter/"/>
    
      <category term="marlin" scheme="https://megapost.io/tags/marlin/"/>
    
  </entry>
  
  <entry>
    <title>airflow 설치하기</title>
    <link href="https://megapost.io/2020/05/30/install-airflow/"/>
    <id>https://megapost.io/2020/05/30/install-airflow/</id>
    <published>2020-05-30T14:13:35.000Z</published>
    <updated>2020-05-30T14:52:18.704Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Airflow-설치하기"><a href="#Airflow-설치하기" class="headerlink" title="Airflow 설치하기"></a>Airflow 설치하기</h2><p>현재 업무에서 AWS환경을  사용 중인데 타 시스템 DB를 체크하여 현 시스템 작업을 실행해야 하는 업무가 생겼습니다.<br>물론 AWS Glue나 Lambda를 통해 구현을 해도 되지만 타 시스템 작업이 언제 끝나는지 주기적으로 (5분? 10분?) 마다 확인해야 하기 때문에 계속 수행을 하기엔 적게라도 비용이 발생하게 됩니다.<br>그래서 기존에 사용중엔 인터페이스 서버에 Airflow를 구성하여 활용해보기로 했습니다.</p><a id="more"></a><h3 id="01-pip-설치하기"><a href="#01-pip-설치하기" class="headerlink" title="01. pip 설치하기"></a>01. pip 설치하기</h3><p>서버에 pip이 설치되어 있지 않으면 설치</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install python3-pip</span></span><br></pre></td></tr></table></figure><p>이후 pip 실행 중에 아래와 같이 오류가 날 경우 삭제하고 재설치 진행</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> pip3</span></span><br><span class="line">Trackback (most recent call last):</span><br><span class="line">  File "/bin/pip3", line 7, in &lt;module&gt;</span><br><span class="line">    from pip import main</span><br><span class="line">iImportError: cannot import name 'main' from 'pip' (/usr/local/lib/python3.7/site-packages/pip/__init__.py)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> python3 -m pip uninstall pip</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#</span><span class="bash"> yum reinstall python3-pip</span></span><br></pre></td></tr></table></figure><h3 id="02-postgresql-설치"><a href="#02-postgresql-설치" class="headerlink" title="02. postgresql 설치"></a>02. postgresql 설치</h3><p>airflow 메타DB를 기본 sqlite를 사용할 경우 멀티잡 실행이 불가능하다 해서 메타DB를 postgresql로 설정하려고 합니다.<br>DB서버를 별도로 두기에는 좀 애매해서 docker를 이용해 postgres를 설치 했습니다.</p><p>1) docker에 postgresql 설치 및 구성</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker pull postgres:12</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#</span><span class="bash"> docker run -d --name airflow_meta_db -e POSTGRES_PASSWORD=password -e PGDATA=/var/lib/postgresql/data/pgdata -v /data/airflow_db:/var/lib/postgresql/data p- 5432:5432 postgres</span></span><br></pre></td></tr></table></figure><p>postgres 환경변수에 비밀번호를 넣어주고 volume은 로컬 파일시스템에 매핑 시켰습니다.</p><p>2) metadb 계정생성 및 권한 설정<br>postgres에 접속해 db 구성을 해줍니다. 접속정보는 postgres / 위에 설정한 password입니다.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">postgres=<span class="comment"># CREATE DATABASE airflow;</span></span><br><span class="line">postgres=<span class="comment"># CREATE USER airflow_meta with ENCRYPTED PASSWORD 'airflow_meta';</span></span><br><span class="line">postgres=<span class="comment"># GRANT all privileges on DATABASE airflow to airflow_meta;</span></span><br><span class="line">postgres=<span class="comment"># \c airflow</span></span><br><span class="line">postgres=<span class="comment"># grant all privileges on all tables in schema public to airflow_meta;</span></span><br></pre></td></tr></table></figure><h3 id="03-airflow-설치"><a href="#03-airflow-설치" class="headerlink" title="03. airflow 설치"></a>03. airflow 설치</h3><p>airflow 설치에 필요한 라이브러리 설치</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install gcc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum install python3-devel</span></span><br></pre></td></tr></table></figure><p>airflow설치</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> pip3 install apache-airflow</span></span><br></pre></td></tr></table></figure><h3 id="04-restart-script-만들기"><a href="#04-restart-script-만들기" class="headerlink" title="04. restart script 만들기"></a>04. restart script 만들기</h3><p>airflow scheduler나 webserver의 경우 restart를 하기 위해선 process를 찾아서 kill해야 하기 때문에 번거로워서 shell을 만들었습니다.</p><p>1) restart_scheduler.sh</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">kill -9 `ps -ef | grep 'airflow scheduler' | awk '&#123;print $2&#125;'`</span><br><span class="line"></span><br><span class="line">airflow scheduler -D</span><br></pre></td></tr></table></figure><p>2) restart_webserver.sh</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">kill -9 `ps -ef | grep 'airflow webserver' | awk '&#123;print $2&#125;'`</span><br><span class="line">kill -9 `ps -ef | grep 'airflow-webserver' | awk '&#123;print $2&#125;'`</span><br><span class="line"></span><br><span class="line">airflow webserver -p 8080 -D</span><br></pre></td></tr></table></figure><h3 id="05-airflow-cfg설정-수정"><a href="#05-airflow-cfg설정-수정" class="headerlink" title="05. airflow.cfg설정 수정"></a>05. airflow.cfg설정 수정</h3><p>metadb를 postgresql을 사용하기 위해 설정을 수정해 줍니다.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">executor &#x3D; CeleryExecutor</span><br><span class="line">sql_alchemy_conn &#x3D; postgresql+psycopg2:&#x2F;&#x2F;airflow_meta:airflow_meta@localhost&#x2F;airflow</span><br></pre></td></tr></table></figure><h3 id="06-DB설정-초기화"><a href="#06-DB설정-초기화" class="headerlink" title="06. DB설정 초기화"></a>06. DB설정 초기화</h3><p>아래 명령어를 통해 DB초기화를 해줍니다.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> airflow initdb</span></span><br></pre></td></tr></table></figure><p>이렇게 구성한 후 아까 생성했던 restart script를 실행해 주면 airflow를 사용할 기본 환경설정이 완료 되었습니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Airflow-설치하기&quot;&gt;&lt;a href=&quot;#Airflow-설치하기&quot; class=&quot;headerlink&quot; title=&quot;Airflow 설치하기&quot;&gt;&lt;/a&gt;Airflow 설치하기&lt;/h2&gt;&lt;p&gt;현재 업무에서 AWS환경을  사용 중인데 타 시스템 DB를 체크하여 현 시스템 작업을 실행해야 하는 업무가 생겼습니다.&lt;br&gt;물론 AWS Glue나 Lambda를 통해 구현을 해도 되지만 타 시스템 작업이 언제 끝나는지 주기적으로 (5분? 10분?) 마다 확인해야 하기 때문에 계속 수행을 하기엔 적게라도 비용이 발생하게 됩니다.&lt;br&gt;그래서 기존에 사용중엔 인터페이스 서버에 Airflow를 구성하여 활용해보기로 했습니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="airflow" scheme="https://megapost.io/categories/airflow/"/>
    
    
      <category term="airflow" scheme="https://megapost.io/tags/airflow/"/>
    
      <category term="postgres" scheme="https://megapost.io/tags/postgres/"/>
    
      <category term="etl" scheme="https://megapost.io/tags/etl/"/>
    
  </entry>
  
  <entry>
    <title>3D프린터 Ender-5 Pro 구입 및 조립기</title>
    <link href="https://megapost.io/2020/04/20/ender-5-pro/"/>
    <id>https://megapost.io/2020/04/20/ender-5-pro/</id>
    <published>2020-04-19T15:20:37.000Z</published>
    <updated>2020-06-16T22:59:43.885Z</updated>
    
    <content type="html"><![CDATA[<p>평소에 너무나도 갖고 싶었지만 선듯 구입하지 못했던 3D프린터를 큰맘 먹고 질렀습니다.<br>3D 모델링도 소질없고, 3D프린터 경험도 없지만 과감하게 질렀는데요, 그만큼 만들면서 삽질도 많이 하고 어려움을 겪고있지만 생각보다 너무 재미있네요. (만드는게 눈에 바로바로 보여서 그런가봅니다 ㅎㅎ)</p><p>제가 구입한 모델은 Ender-5 Pro모델인데요, 보통 입문으로 많이 구입하는 모델이 Ender-3와 Ender-5인데 Ender-3와의 차이는 크게는 노즐이 위로 올라가면서 만드냐(Ender-3), 보드가 내려가면서 만드냐(Ender-5)인 것 같고 Ender-5와 Ender-5 Pro 차이는 Ender-5에 사일런스 보드와 노즐 밀어내는 기구 업그레이드 정도인 것 같습니다.<br>(나중에 이 사일런스 보드때문에 엄청난 고생을 했죠.. 초보가 ㅠㅠ)</p><p>그럼 조립을 시작해봅니다.</p><a id="more"></a><p><img src="/images/ender5/001.jpg" alt=""></p><p>박스를 오픈하면 조립 설명서와 스폰지로 꼼꼼하게 포장된 부품이 보입니다.</p><p><img src="/images/ender5/002.jpg" alt=""></p><p>위 스폰지를 제거하면 Z축을 담당하는 모터와 지지대 연결하는 판이 보이고요<br>처음에는 저게 뭔지도 모르고 그냥 뜯었죠.. 신기방기</p><p><img src="/images/ender5/003.jpg" alt=""></p><p>요놈때문에 애좀 먹었습니다.<br>물론 모터 잘못은 아니겠지만..</p><p><img src="/images/ender5/004.jpg" alt=""></p><p>그 아래로 필라멘트가 나오는 부품이 보이네요. 저 부분이 X Y로 움직이면서 한층 한층 쌓는거죠.</p><p><img src="/images/ender5/005.jpg" alt=""></p><p>그리고 프린터 기둥과 프린터 구동에 필요한 보드가 들어있는 바닥면 부품입니다.<br>테스트를 위해 기본 제공하는 필라멘트는 조금 쓰다가 다른걸로 바꿔버렸습니다.</p><p><img src="/images/ender5/006.jpg" alt=""></p><p>밑면을 책상위에 올려놓고 조립을 시작합니다. </p><p><img src="/images/ender5/007.jpg" alt=""></p><p>조립 매뉴얼은 프린터에도 인쇄가 되어있네요.</p><p><img src="/images/ender5/008.jpg" alt=""></p><p>볼트는 육각모양을 사용하고 볼트를 조일 수 있는 기본 공구는 들어있지만 저는 제가 가지고 있던 공구를 활용했습니다.<br>이럴때 아니면 쓸일이 별로 없어요…</p><p><img src="/images/ender5/009.jpg" alt=""></p><p>조립에 필요한 볼트와 전원케이블 등등의 부품이 있습니다.</p><p><img src="/images/ender5/010.jpg" alt=""></p><p>그렇지않아도 니퍼 하나 사고싶었는데 들어있네요.</p><p><img src="/images/ender5/011.jpg" alt=""></p><p>우선 네군데에 기둥을 세워 볼트로 조여줍니다.<br>꼭 매뉴얼을 잘 보고 조립하세요.</p><p>저는 아무생각없이 조립했다가, 윗부분은 볼트를 넣는 구멍이 하나 더 있는걸 모르고 조립했습니다.</p><p>다행히 4개 기둥 중 하나만 방향이 잘못되어서 덜 고생했습니다.</p><p><img src="/images/ender5/012.jpg" alt=""></p><p>출력물이 인쇄될 보드입니다. 수축을 최소화 하기 위해 열을 발생시키는 부품이 들어가 있습니다.</p><p>위에 있는 판은 자석으로 붙습니다. </p><p>(여담으로 레벨링 하기 전에 꼭 4군데 나사를 조여주세요. 안그랬다가 레벨링할때 보드에 구멍이 나서 새로 하나 사야할 것 같습니다…)</p><p><img src="/images/ender5/013.jpg" alt=""></p><p>Z축 스텝모터와 필라멘트 밀어주는 부품, 기기 컨트롤을 위한 LCD 조종기 부품이 보입니다.</p><p><img src="/images/ender5/014.jpg" alt=""></p><p>X Y축을 담당할 윗판을 연결 했습니다.<br>필라멘트가 저 파란관을 통해 들어가서 안에 필라멘트를 가열하는 부품을 통해 녹아서 인쇄를 하는 구조입니다.<br>(정확한 부품 명은 나중에 찾아보고..)</p><p><img src="/images/ender5/015.jpg" alt=""></p><p>Z축 모터도 움직이지 않도록 잘 고정시켜줍니다.</p><p><img src="/images/ender5/016.jpg" alt=""></p><p>위에 스위치가 보입니다.<br>보드의 Home위치를 잡아줄 때 사용합니다.</p><p><img src="/images/ender5/017.jpg" alt=""></p><p>어느정도 완성이 되어가고있는 느낌입니다.</p><p><img src="/images/ender5/018.jpg" alt=""></p><p>이번엔 Z축에 출력물 지지를 위한 보드를 연결해줍니다.<br>6개의 볼트를 조여주면</p><p><img src="/images/ender5/019.jpg" alt=""></p><p>요렇게.. 고정이 됩니다.</p><p><img src="/images/ender5/020.jpg" alt=""></p><p>이제 반정도 조립한 느낌입니다.</p><p><img src="/images/ender5/021.jpg" alt=""></p><p>필라멘트 통을 걸 수 있는 지지대와 필라멘트를 밀어주는 부품을 옆면에 부착합니다.<br>지지대는 매뉴얼에는 저 방향이 아닌데 보통 공간 활용면에서 저렇게도 장착을 많이 하더라구요.</p><p><img src="/images/ender5/022.jpg" alt=""></p><p>이번 조립에 가장 힘들었던게 저 나사 조이는 것 같습니다.<br>프로파일 내부에 볼트 채결을 위한 부품을 넣고 방향을 잡는데.. 힘드네요</p><p><img src="/images/ender5/023.jpg" alt=""></p><p>필라멘트를 공급해주는 모터입니다.<br>Ender 5 Pro에서 업그레이드 된 부분인데 기존 부품은 문제가 좀 있는것 같았습니다.</p><p>근데 Ender 5 구매 후 나중에 장착해서 무방한 것 같습니다.</p><p><img src="/images/ender5/025.jpg" alt=""></p><p>프린터 보드에서 나오는 케이블은 조종기의 오른쪽 부분(사진 기준)에 넣습니다.</p><p><img src="/images/ender5/026.jpg" alt=""></p><p>이제 모터와 각종 스위치에 들어가는 케이블을 연결 합니다.<br>각각 어디에 사용되는 케이블인지 라벨링이 되어있습니다.</p><p><img src="/images/ender5/027.jpg" alt=""></p><p>라벨링이 없는 나머지 선들은 선 색상이 같은 것을 찾아 연결해줍니다.</p><p><img src="/images/ender5/028.jpg" alt=""></p><p>드디어 완성되었습니다!</p><p><img src="/images/ender5/029.jpg" alt=""></p><p>보드가 올라갈 때 케이블간 간섭이 없도록 선정리를 잘 해줘야합니다.</p><p><img src="/images/ender5/031.jpg" alt=""></p><p>이렇게 구석에 선을 모아서 케이블타이로 묶어줍니다.</p><p><img src="/images/ender5/032.jpg" alt=""></p><p>필라멘트가 들어가는 관은 꺾이지 않게 잘 위치를 잡아줘야 합니다.</p><p><img src="/images/ender5/033.jpg" alt=""></p><p>필라멘트를 밀어주는 모터에 파란관을 채결 합니다.</p><p><img src="/images/ender5/034.jpg" alt=""></p><p>레벨 조절을 한 후 레벨링이 잘 되었는지 시험삼아 한번 뽑아봅니다.</p><p>층이 얇은건 잘 나오네요.</p><p>근데 망했습니다.</p><p>……………. 망한 이야기는 다음에….</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;평소에 너무나도 갖고 싶었지만 선듯 구입하지 못했던 3D프린터를 큰맘 먹고 질렀습니다.&lt;br&gt;3D 모델링도 소질없고, 3D프린터 경험도 없지만 과감하게 질렀는데요, 그만큼 만들면서 삽질도 많이 하고 어려움을 겪고있지만 생각보다 너무 재미있네요. (만드는게 눈에 바로바로 보여서 그런가봅니다 ㅎㅎ)&lt;/p&gt;
&lt;p&gt;제가 구입한 모델은 Ender-5 Pro모델인데요, 보통 입문으로 많이 구입하는 모델이 Ender-3와 Ender-5인데 Ender-3와의 차이는 크게는 노즐이 위로 올라가면서 만드냐(Ender-3), 보드가 내려가면서 만드냐(Ender-5)인 것 같고 Ender-5와 Ender-5 Pro 차이는 Ender-5에 사일런스 보드와 노즐 밀어내는 기구 업그레이드 정도인 것 같습니다.&lt;br&gt;(나중에 이 사일런스 보드때문에 엄청난 고생을 했죠.. 초보가 ㅠㅠ)&lt;/p&gt;
&lt;p&gt;그럼 조립을 시작해봅니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="3dprinter" scheme="https://megapost.io/categories/3dprinter/"/>
    
    
      <category term="ender5" scheme="https://megapost.io/tags/ender5/"/>
    
      <category term="3dprinter" scheme="https://megapost.io/tags/3dprinter/"/>
    
  </entry>
  
  <entry>
    <title>SHAHE 디지털 버니어 캘리퍼스</title>
    <link href="https://megapost.io/2020/04/14/shahe-digital-vernier-calipers/"/>
    <id>https://megapost.io/2020/04/14/shahe-digital-vernier-calipers/</id>
    <published>2020-04-14T00:35:29.000Z</published>
    <updated>2020-04-14T04:28:22.507Z</updated>
    
    <content type="html"><![CDATA[<p>이번에 큰맘먹고 3D프린터를 구매를 해서 물건을 만들때 좀 더 치수를 정확하게 재기 위해서 캘리퍼스를 구매 했습니다.</p><p>인터넷에서 찾아보니 정밀 공구는 중국산 사는거 아니라고 하는데… 그렇다고 일본제품을 사기엔 시국이 그렇고 가격도 만만치 않더라구요.</p><p>그래서 그나마 평도 좋고 가격도 나름 저렴한 SHAHE 디지털 버니어 캘리퍼스를 구매했습니다.</p><p>크기는 150mm, 200mm, 300mm 가 있던데 200mm로 구매 했습니다.</p><a id="more"></a><p><img src="/images/vc/001.jpg" alt=""></p><p>그래도 포장이 생각보다 고급스러웠습니다. </p><p>저렴한 제품이라곤 해도 그래도 어느정도 가격대가 있긴 한데 나름 만족을 주는 것 같습니다.</p><p><img src="/images/vc/002.jpg" alt=""></p><p>국내 정식 수입 제품이라 판매점에서 1년 무상보증도 해줍니다. </p><p><img src="/images/vc/003.jpg" alt=""></p><p>보관용 플라스틱 박스입니다. 수입사 주소도 붙어있어서 AS보내거나 제품 문의를 할때 쉽게 확인할 수 있습니다.</p><p><img src="/images/vc/004.jpg" alt=""></p><p>캘리퍼는 양 끝이 밀봉된 비닐포장이 되어있었습니다.<br>새제품이라는 믿음을 심어주네요 ㅎㅎ</p><p><img src="/images/vc/005.jpg" alt=""></p><p>수치를 확인할 수 있는 액정 화면입니다. 주변으로 ON/OFF, 영점조절, 단위조절 스위치가 보입니다.</p><p><img src="/images/vc/006.jpg" alt=""></p><p>CR2032 배터리 1개를 사용합니다. 기본으로 2개를 제공해줍니다.</p><p><img src="/images/vc/007.jpg" alt=""></p><p>영점조절용 도구인 것 같습니다. 녹쓸지 말라고 구리스가 발라져있어 지저분해보이네요.</p><p><img src="/images/vc/008.jpg" alt=""></p><p>알콜솜으로 깨끗하게 닦아서</p><p><img src="/images/vc/009.jpg" alt=""></p><p>캘리퍼를 이용해 재봅니다.  정확하네요.</p><p>집에서 엄청나게 정밀하게 재는것이 아닌 취미용으로 이정도면 충분한 것 같습니다.</p><p>3D 프린터가 도착하면 첫 작품에 활용해봐야겠습니다.</p><p>이상 개봉기였습니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;이번에 큰맘먹고 3D프린터를 구매를 해서 물건을 만들때 좀 더 치수를 정확하게 재기 위해서 캘리퍼스를 구매 했습니다.&lt;/p&gt;
&lt;p&gt;인터넷에서 찾아보니 정밀 공구는 중국산 사는거 아니라고 하는데… 그렇다고 일본제품을 사기엔 시국이 그렇고 가격도 만만치 않더라구요.&lt;/p&gt;
&lt;p&gt;그래서 그나마 평도 좋고 가격도 나름 저렴한 SHAHE 디지털 버니어 캘리퍼스를 구매했습니다.&lt;/p&gt;
&lt;p&gt;크기는 150mm, 200mm, 300mm 가 있던데 200mm로 구매 했습니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="개봉기" scheme="https://megapost.io/categories/%EA%B0%9C%EB%B4%89%EA%B8%B0/"/>
    
    
      <category term="캘리퍼" scheme="https://megapost.io/tags/%EC%BA%98%EB%A6%AC%ED%8D%BC/"/>
    
      <category term="버니어캘리퍼스" scheme="https://megapost.io/tags/%EB%B2%84%EB%8B%88%EC%96%B4%EC%BA%98%EB%A6%AC%ED%8D%BC%EC%8A%A4/"/>
    
      <category term="SHAHE" scheme="https://megapost.io/tags/SHAHE/"/>
    
  </entry>
  
  <entry>
    <title>Redshift table lock관련 가이드</title>
    <link href="https://megapost.io/2020/04/09/redshift-lock/"/>
    <id>https://megapost.io/2020/04/09/redshift-lock/</id>
    <published>2020-04-09T09:20:35.000Z</published>
    <updated>2020-04-14T03:03:26.938Z</updated>
    
    <content type="html"><![CDATA[<h3 id="01-Redshift-Lock-leve"><a href="#01-Redshift-Lock-leve" class="headerlink" title="01. Redshift Lock leve"></a>01. Redshift Lock leve</h3><ul><li>AccessExclusiveLock: ALTER TABLE, DROP 또는 TRUNCATE와 같은 DDL 작업 중에 주로 획득. AccessExclusiveLock은 다른 모든 잠금 시도를 차단.</li><li>AccessShareLock: UNLOAD, SELECT, UPDATE 또는 DELETE 작업 중에 획득. AccessShareLock은 AccessExclusiveLock 시도만 차단. AccessShareLock은 테이블에서 읽기 또는 쓰기를 시도하는 다른 세션을 차단하지 않음.</li><li>ShareRowExclusiveLock: COPY, INSERT, UPDATE 또는 DELETE 작업 중에 획득. ShareRowExclusiveLock은 AccessExclusiveLock 및 기타 ShareRowExclusiveLock 시도를 차단하지만, AccessShareLock 시도는 차단하지 않음.</li></ul><h3 id="02-Blocking-방지-가이드"><a href="#02-Blocking-방지-가이드" class="headerlink" title="02. Blocking 방지 가이드"></a>02. Blocking 방지 가이드</h3><ul><li>ExclusiveLock (X-LOCK)을 유발하는 DDL 구문이 포함된 트랜잭션은 짧게 유지. 혹은 하나의 프로시저에 DDL 구문과 DML 작업이 함께 존재하는 경우, 개별 트랜잭션으로 분리하는 것도 방법.</li><li>대량의 INSERT/UPDATE/DELETE는 스테이징 테이블을 활용한 UPSERT, ALTER TABLE APPEND 구문 사용을 권장.</li><li>쿼리 실행 시간 기준 TOP 10 쿼리나, 아래의 Lock을 유발하는 쿼리의 실행 시간을 줄이기 위한 튜닝 필요<a id="more"></a><h3 id="03-Lock모니터링"><a href="#03-Lock모니터링" class="headerlink" title="03. Lock모니터링"></a>03. Lock모니터링</h3></li><li>아래 쿼리를 실행하여 현재 Lock으로 인한 WAIT이 발생하고 있는지, Blocking을 유발하는 X-LOCK 쿼리가 있는지 확인 가능.</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    a.txn_owner</span><br><span class="line">    , a.txn_db</span><br><span class="line">    , a.xid</span><br><span class="line">    , a.pid</span><br><span class="line">    , a.txn_start</span><br><span class="line">    , a.lock_mode</span><br><span class="line">    , a.relation <span class="keyword">as</span> table_id</span><br><span class="line">    , nvl(<span class="keyword">trim</span>(c.<span class="string">"name"</span>),d.relname) <span class="keyword">as</span> tablename</span><br><span class="line">    , a.granted,b.pid <span class="keyword">as</span> blocking_pid </span><br><span class="line">    , <span class="keyword">datediff</span>(s,a.txn_start,<span class="keyword">getdate</span>())/<span class="number">86400</span>||<span class="string">' days'</span>||<span class="keyword">datediff</span>(s,a.txn_start,<span class="keyword">getdate</span>())%<span class="number">86400</span>/<span class="number">3600</span>||<span class="string">' hrs'</span>||<span class="keyword">datediff</span>(s,a.txn_start,<span class="keyword">getdate</span>())%<span class="number">3600</span>/<span class="number">60</span>||<span class="string">' mins'</span>||<span class="keyword">datediff</span>(s,a.txn_start,<span class="keyword">getdate</span>())%<span class="number">60</span>||<span class="string">' secs'</span> <span class="keyword">as</span> txn_duration</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    svv_transactions a <span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> pid,relation,granted <span class="keyword">from</span> pg_locks <span class="keyword">group</span> <span class="keyword">by</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) b </span><br><span class="line">        <span class="keyword">on</span> a.relation=b.relation <span class="keyword">and</span> a.granted=<span class="string">'f'</span> <span class="keyword">and</span> b.granted=<span class="string">'t'</span> </span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> * <span class="keyword">from</span> stv_tbl_perm <span class="keyword">where</span> slice=<span class="number">0</span>) c </span><br><span class="line">        <span class="keyword">on</span> a.relation=c.id </span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> pg_class d <span class="keyword">on</span> a.relation=d.oid</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    a.relation <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><ul><li>간단히 트랜젝션 상세 정보를 제외한 Lock정보도 확인 가능</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">current_time</span></span><br><span class="line">    , c.relname</span><br><span class="line">    , l.database</span><br><span class="line">    , l.transaction</span><br><span class="line">    , l.pid</span><br><span class="line">    , a.usename</span><br><span class="line">    , l.mode</span><br><span class="line">    , l.granted</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    pg_locks l <span class="keyword">JOIN</span> pg_catalog.pg_class c </span><br><span class="line">        <span class="keyword">ON</span> c.oid = l.relation</span><br><span class="line">    <span class="keyword">JOIN</span> pg_catalog.pg_stat_activity a </span><br><span class="line">        <span class="keyword">ON</span> a.procpid = l.pid</span><br><span class="line"><span class="keyword">WHERE</span> l.pid &lt;&gt; pg_backend_pid()</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>이후 X-LOCK이 발생한 쿼리를 kill하여 WAIT을 해제할 수 있음</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> pg_terminate_backend(PID);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;01-Redshift-Lock-leve&quot;&gt;&lt;a href=&quot;#01-Redshift-Lock-leve&quot; class=&quot;headerlink&quot; title=&quot;01. Redshift Lock leve&quot;&gt;&lt;/a&gt;01. Redshift Lock leve&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;AccessExclusiveLock: ALTER TABLE, DROP 또는 TRUNCATE와 같은 DDL 작업 중에 주로 획득. AccessExclusiveLock은 다른 모든 잠금 시도를 차단.&lt;/li&gt;
&lt;li&gt;AccessShareLock: UNLOAD, SELECT, UPDATE 또는 DELETE 작업 중에 획득. AccessShareLock은 AccessExclusiveLock 시도만 차단. AccessShareLock은 테이블에서 읽기 또는 쓰기를 시도하는 다른 세션을 차단하지 않음.&lt;/li&gt;
&lt;li&gt;ShareRowExclusiveLock: COPY, INSERT, UPDATE 또는 DELETE 작업 중에 획득. ShareRowExclusiveLock은 AccessExclusiveLock 및 기타 ShareRowExclusiveLock 시도를 차단하지만, AccessShareLock 시도는 차단하지 않음.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;02-Blocking-방지-가이드&quot;&gt;&lt;a href=&quot;#02-Blocking-방지-가이드&quot; class=&quot;headerlink&quot; title=&quot;02. Blocking 방지 가이드&quot;&gt;&lt;/a&gt;02. Blocking 방지 가이드&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ExclusiveLock (X-LOCK)을 유발하는 DDL 구문이 포함된 트랜잭션은 짧게 유지. 혹은 하나의 프로시저에 DDL 구문과 DML 작업이 함께 존재하는 경우, 개별 트랜잭션으로 분리하는 것도 방법.&lt;/li&gt;
&lt;li&gt;대량의 INSERT/UPDATE/DELETE는 스테이징 테이블을 활용한 UPSERT, ALTER TABLE APPEND 구문 사용을 권장.&lt;/li&gt;
&lt;li&gt;쿼리 실행 시간 기준 TOP 10 쿼리나, 아래의 Lock을 유발하는 쿼리의 실행 시간을 줄이기 위한 튜닝 필요
    
    </summary>
    
    
      <category term="AWS" scheme="https://megapost.io/categories/AWS/"/>
    
      <category term="Redshift" scheme="https://megapost.io/categories/AWS/Redshift/"/>
    
    
      <category term="AWS" scheme="https://megapost.io/tags/AWS/"/>
    
      <category term="Redshift" scheme="https://megapost.io/tags/Redshift/"/>
    
      <category term="Lock" scheme="https://megapost.io/tags/Lock/"/>
    
  </entry>
  
  <entry>
    <title>nvidia JETSON NANO, JetBot AI Kit 개봉기</title>
    <link href="https://megapost.io/2020/04/07/nvidia-jetson-nano-review/"/>
    <id>https://megapost.io/2020/04/07/nvidia-jetson-nano-review/</id>
    <published>2020-04-07T04:34:01.000Z</published>
    <updated>2020-04-14T04:28:46.595Z</updated>
    
    <content type="html"><![CDATA[<p>아이언맨의 자비스와 유사하게 짭비스를 만들어보기 위해 작년 11월에 Jetson Nano, JetBot AI Kit을 구매 했습니다.</p><p>원래 처음 목표는 특정 사람 얼굴을 인식해서 따라다니고, 간단한 명령을 내리면 수행해주는 정도를 만들어보고 싶었는데요, JetBot AI Kit가 불량품이 와서 Jetson Nano만 가지고 놀았는데 얼마후 삼성에서 ‘볼리’라는걸 출시 했네요.</p><p>내가 만들고 싶었던걸 더 작고 이쁘게 만든 제품이 나왔네요 ㅠㅠ</p><p>그래도 만들어볼까 했던 것이 시제품으로 나왔다는 뿌듯함과 역시 내가 생각한건 세상에 존재한다는 진리를 다시한번 깨닫고 개봉기를 작성합니다.</p><a id="more"></a><p>이건 카메라 켜는것도 귀찮아서 폰카로 찍었었네요 (…)</p><p><img src="/images/jetson_nano/001.jpg" alt=""></p><p>Jetson NANO Developer Kit 입니다. 박스가 생각보다 작았습니다. 크기는 라즈베리파이보다 약간 큰것같네요.</p><p><img src="/images/jetson_nano/002.jpg" alt=""></p><p>큰 박스는 JetBot AI Kit입니다. Jetson NANO를 18650배터리 3개를 넣어서 Jetson NANO를 장착해서 사용하는 제품입니다.</p><p><img src="/images/jetson_nano/003.jpg" alt=""></p><p>Kit에 Jetson Nano용 주변기기가 포함되어있습니다. 카메라와 WiFi모듈도 같이 포함되어 있고 블루투스 연결용 동글이도 있어서 블루투스 컨트롤러를 연결해 조종할 수 있습니다. </p><p><img src="/images/jetson_nano/004.jpg" alt=""></p><p>Jetson에 연결할 WiFi 모듈입니다.</p><p><img src="/images/jetson_nano/005.jpg" alt=""></p><p>기타 나머지 조립에 필요한 부품들은 알루미늄 케이스 안에 있습니다.</p><p><img src="/images/jetson_nano/006.jpg" alt=""></p><p>바퀴를 구동하기 위한 모터</p><p><img src="/images/jetson_nano/007.jpg" alt=""></p><p>배터리 및 상태를 확인할 수 있는 작은 LED화면이 보입니다. </p><p><img src="/images/jetson_nano/008.jpg" alt=""></p><p>Jetson NANO 박스를 열어봅니다.<br>작은 상자 안에 고급스러운 비닐에 포장되어 있습니다.</p><p><img src="/images/jetson_nano/009.jpg" alt=""></p><p>박스를 접어서 그 위에 NANO 기판을 올려놓을 수 있다네요. </p><p><img src="/images/jetson_nano/010.jpg" alt=""></p><p>일단 Jetson NANO를 올려놓기 위해 JetBot 조립을 마저 합니다. 아래 WiFi용 안테나를 설치할 수 있는 슬롯도 연결 합니다.</p><p><img src="/images/jetson_nano/011.jpg" alt=""></p><p>실제 Jetson NANO는 저 작은 기판만 있으면 동작이 가능한 것 같습니다. 향후 다른 보드에도 장착이 가능한 구조 같습니다.</p><p><img src="/images/jetson_nano/012.jpg" alt=""></p><p>WiFi 모듈을 장창하고 안테나 선을 연결해줍니다.</p><p>사실 이 사진은 안테나 선을 연결  안하고 Jetson NANO를 장착한 이후 다시 풀어서 찍은 사진입니다. (ㅠㅠ)</p><p><img src="/images/jetson_nano/013.jpg" alt=""></p><p>이렇게 JetBot 위에 올려주고</p><p><img src="/images/jetson_nano/014.jpg" alt=""></p><p>Jetson NANO 모듈을 장착해주면 됩니다.</p><p>안테나선 어쩔..</p><p><img src="/images/jetson_nano/015.jpg" alt=""></p><p>JetBot은 불량이었지만 Jetson은 다행히 잘 작동합니다.</p><p><img src="/images/jetson_nano/016.jpg" alt=""></p><p>구동할때 발열이 심하다고 해서 별도 쿨러를 구매하였습니다.</p><p><img src="/images/jetson_nano/017.jpg" alt=""></p><p>방열판 구멍과 잘 안맞아서 장착에 애를 먹긴 했지만 잘 장착 했습니다.</p><p>처음에 쿨러가 안돌아서 이것도 불량인가 싶었는데 발열이 없을때는 쿨러가 동작을 안하더라구요.</p><p>Jetson에 접속해 명령어 한줄 날려주면 잘 돌아가는지 확인할 수 있습니다.</p><p><img src="/images/jetson_nano/018.jpg" alt=""></p><p>옆에는 Openstack Controller node용으로 샀던.. 나에게 실망감을 안겨준 라떼판다입니다.<br>제가 너무 많은걸 바란 것이겠죠..</p><p>이상 Jetson NANO, JetBot 개봉기였습니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;아이언맨의 자비스와 유사하게 짭비스를 만들어보기 위해 작년 11월에 Jetson Nano, JetBot AI Kit을 구매 했습니다.&lt;/p&gt;
&lt;p&gt;원래 처음 목표는 특정 사람 얼굴을 인식해서 따라다니고, 간단한 명령을 내리면 수행해주는 정도를 만들어보고 싶었는데요, JetBot AI Kit가 불량품이 와서 Jetson Nano만 가지고 놀았는데 얼마후 삼성에서 ‘볼리’라는걸 출시 했네요.&lt;/p&gt;
&lt;p&gt;내가 만들고 싶었던걸 더 작고 이쁘게 만든 제품이 나왔네요 ㅠㅠ&lt;/p&gt;
&lt;p&gt;그래도 만들어볼까 했던 것이 시제품으로 나왔다는 뿌듯함과 역시 내가 생각한건 세상에 존재한다는 진리를 다시한번 깨닫고 개봉기를 작성합니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="개봉기" scheme="https://megapost.io/categories/%EA%B0%9C%EB%B4%89%EA%B8%B0/"/>
    
    
      <category term="Jetson" scheme="https://megapost.io/tags/Jetson/"/>
    
      <category term="JetBot" scheme="https://megapost.io/tags/JetBot/"/>
    
      <category term="nvidia" scheme="https://megapost.io/tags/nvidia/"/>
    
  </entry>
  
  <entry>
    <title>01-Openstack설치를 위한 OS환경 구성(Ubuntu 18.04)</title>
    <link href="https://megapost.io/2020/04/07/01-openstack-ubuntu/"/>
    <id>https://megapost.io/2020/04/07/01-openstack-ubuntu/</id>
    <published>2020-04-07T01:35:04.000Z</published>
    <updated>2020-04-14T03:03:17.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Openstack-설치를-위한-사전-설정-Ubuntu-18-04"><a href="#Openstack-설치를-위한-사전-설정-Ubuntu-18-04" class="headerlink" title="Openstack 설치를 위한 사전 설정(Ubuntu 18.04)"></a>Openstack 설치를 위한 사전 설정(Ubuntu 18.04)</h1><h2 id="01-Openstack-Compute-node-setting"><a href="#01-Openstack-Compute-node-setting" class="headerlink" title="01. Openstack Compute node setting"></a>01. Openstack Compute node setting</h2><h3 id="1-os파티션-작업"><a href="#1-os파티션-작업" class="headerlink" title="1) os파티션 작업"></a>1) os파티션 작업</h3><p>lvmdiskscan 명령어를 실행해 disk volume 확인</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lvmdiskscan</span></span><br><span class="line">  /dev/nvme0n1             [      27.25 GiB] </span><br><span class="line">  /dev/loop0               [     &lt;89.09 MiB] </span><br><span class="line">  /dev/ubuntu-vg/ubuntu-lv [       4.00 GiB] </span><br><span class="line">  /dev/nvme2n1             [     465.76 GiB] </span><br><span class="line">  /dev/loop1               [     &lt;91.37 MiB] </span><br><span class="line">  /dev/nvme1n1             [    &lt;476.94 GiB] </span><br><span class="line">  /dev/nvme1n1p1           [     512.00 MiB] </span><br><span class="line">  /dev/nvme1n1p2           [       1.00 GiB] </span><br><span class="line">  /dev/nvme1n1p3           [    &lt;475.44 GiB] LVM physical volume</span><br><span class="line">  1 disk</span><br><span class="line">  7 partitions</span><br><span class="line">  0 LVM physical volume whole disks</span><br><span class="line">  1 LVM physical volume</span><br></pre></td></tr></table></figure><a id="more"></a><p>-l 옵션을 사용하면 연관된 device만 보여줌</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lvmdiskscan -l</span></span><br><span class="line">  WARNING: only considering LVM devices</span><br><span class="line">  /dev/nvme1n1p3           [    &lt;475.44 GiB] LVM physical volume</span><br><span class="line">  0 LVM physical volume whole disks</span><br><span class="line">  1 LVM physical volume</span><br></pre></td></tr></table></figure><p>총 SSD 용량중에 ubuntu-lv로 4G만 할당 되어 있습니다.</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pvscan</span></span><br><span class="line">  PV /dev/nvme1n1p3   VG ubuntu-vg       lvm2 [475.43 GiB / 471.43 GiB free]</span><br><span class="line">  Total: 1 [475.43 GiB] / in use: 1 [475.43 GiB] / in no VG: 0 [0   ]</span><br><span class="line">  </span><br><span class="line"><span class="meta">$</span><span class="bash"> pvs</span></span><br><span class="line">  PV             VG        Fmt  Attr PSize   PFree  </span><br><span class="line">  /dev/nvme1n1p3 ubuntu-vg lvm2 a--  475.43g 471.43g</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> lvs</span></span><br><span class="line">  LV        VG        Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  ubuntu-lv ubuntu-vg -wi-ao---- 4.00g  </span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> lvresize -L +471G --resizefs /dev/mapper/ubuntu--vg-ubuntu--lv</span></span><br><span class="line">  Size of logical volume ubuntu-vg/ubuntu-lv changed from 4.00 GiB (1024 extents) to 475.00 GiB (121600 extents).</span><br><span class="line">  Logical volume ubuntu-vg/ubuntu-lv successfully resized.</span><br><span class="line">resize2fs 1.44.1 (24-Mar-2018)</span><br><span class="line">Filesystem at /dev/mapper/ubuntu--vg-ubuntu--lv is mounted on /; on-line resizing required</span><br><span class="line">old_desc_blocks = 1, new_desc_blocks = 60</span><br><span class="line">The filesystem on /dev/mapper/ubuntu--vg-ubuntu--lv is now 124518400 (4k) blocks long.</span><br></pre></td></tr></table></figure><p>lvresize를 통해 남은 용량을 vg에 할당해줍니다.</p><h3 id="2-hostname-및-ip설정"><a href="#2-hostname-및-ip설정" class="headerlink" title="2) hostname 및 ip설정"></a>2) hostname 및 ip설정</h3><p>ubuntu 18.04에선 hostnamectl로 hostname을 변경한 이후 적용이 안되는 경우가 있습니다. 그럴 경우 아래와 같이 호스트 네임 변경 권한을 줘야 합니다.</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/cloud/cloud.cfg</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="meta">#</span><span class="bash"> This will cause the <span class="built_in">set</span>+update hostname module to not operate (<span class="keyword">if</span> <span class="literal">true</span>)</span></span><br><span class="line">preserve_hostname: true # 이 부분을 false -&gt; true로 변경</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> hostnamectl <span class="built_in">set</span>-hostname os_controller</span></span><br></pre></td></tr></table></figure><p>ip주소를 아래와 같은 방법으로 변경</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /etc/netplan/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">50-cloud-init.yaml</span><br><span class="line"><span class="meta">$</span><span class="bash"> vi 50-cloud-init.yaml</span></span><br><span class="line"></span><br><span class="line">network:</span><br><span class="line">    ethernets:</span><br><span class="line">        ens3:</span><br><span class="line">            addresses:</span><br><span class="line">            - 192.168.1.80/24</span><br><span class="line">            gateway4: 192.168.1.1</span><br><span class="line">            nameservers:</span><br><span class="line">                addresses:</span><br><span class="line">                - 192.168.1.1</span><br><span class="line">    version: 2</span><br></pre></td></tr></table></figure><p>설정할 ip주소를 입력하고 저장한 뒤 적용</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo netplan apply</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Openstack-설치를-위한-사전-설정-Ubuntu-18-04&quot;&gt;&lt;a href=&quot;#Openstack-설치를-위한-사전-설정-Ubuntu-18-04&quot; class=&quot;headerlink&quot; title=&quot;Openstack 설치를 위한 사전 설정(Ubuntu 18.04)&quot;&gt;&lt;/a&gt;Openstack 설치를 위한 사전 설정(Ubuntu 18.04)&lt;/h1&gt;&lt;h2 id=&quot;01-Openstack-Compute-node-setting&quot;&gt;&lt;a href=&quot;#01-Openstack-Compute-node-setting&quot; class=&quot;headerlink&quot; title=&quot;01. Openstack Compute node setting&quot;&gt;&lt;/a&gt;01. Openstack Compute node setting&lt;/h2&gt;&lt;h3 id=&quot;1-os파티션-작업&quot;&gt;&lt;a href=&quot;#1-os파티션-작업&quot; class=&quot;headerlink&quot; title=&quot;1) os파티션 작업&quot;&gt;&lt;/a&gt;1) os파티션 작업&lt;/h3&gt;&lt;p&gt;lvmdiskscan 명령어를 실행해 disk volume 확인&lt;/p&gt;
&lt;figure class=&quot;highlight console&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; lvmdiskscan&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /dev/nvme0n1             [      27.25 GiB] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /dev/loop0               [     &amp;lt;89.09 MiB] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /dev/ubuntu-vg/ubuntu-lv [       4.00 GiB] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /dev/nvme2n1             [     465.76 GiB] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /dev/loop1               [     &amp;lt;91.37 MiB] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /dev/nvme1n1             [    &amp;lt;476.94 GiB] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /dev/nvme1n1p1           [     512.00 MiB] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /dev/nvme1n1p2           [       1.00 GiB] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /dev/nvme1n1p3           [    &amp;lt;475.44 GiB] LVM physical volume&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  1 disk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  7 partitions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  0 LVM physical volume whole disks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  1 LVM physical volume&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Openstack" scheme="https://megapost.io/categories/Openstack/"/>
    
    
      <category term="OpenStack" scheme="https://megapost.io/tags/OpenStack/"/>
    
      <category term="Ubuntu" scheme="https://megapost.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>AWS Redshift Spectrum 정리</title>
    <link href="https://megapost.io/2020/04/07/aws-redshift-spectrum/"/>
    <id>https://megapost.io/2020/04/07/aws-redshift-spectrum/</id>
    <published>2020-04-06T16:01:02.000Z</published>
    <updated>2020-04-14T03:03:07.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redshift-Spectrum-정리"><a href="#Redshift-Spectrum-정리" class="headerlink" title="Redshift Spectrum 정리"></a>Redshift Spectrum 정리</h1><h2 id="01-Redshift-Spectrum-Schma-생성"><a href="#01-Redshift-Spectrum-Schma-생성" class="headerlink" title="01. Redshift Spectrum Schma 생성"></a>01. Redshift Spectrum Schma 생성</h2><ul><li>스팩트럼을 사용하기 위한 Schema 생성<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">schema</span> spectrum </span><br><span class="line"><span class="keyword">from</span> <span class="keyword">data</span> <span class="keyword">catalog</span> </span><br><span class="line"><span class="keyword">database</span> <span class="string">'spectrumdb'</span> </span><br><span class="line">iam_role <span class="string">'arn:aws:iam::123456789012:role/mySpectrumRole'</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>;</span><br></pre></td></tr></table></figure><a id="more"></a></li><li>기존에 생성되어있던 Glue 카탈로그를 활용하여 생성도 가능함.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">schema</span> spectrum_schema <span class="keyword">from</span> <span class="keyword">data</span> <span class="keyword">catalog</span> </span><br><span class="line"><span class="keyword">database</span> <span class="string">'spectrum_db'</span> </span><br><span class="line">iam_role <span class="string">'arn:aws:iam::123456789012:role/MySpectrumRole'</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>;</span><br></pre></td></tr></table></figure></li><li>EMR같은 Hive 메타스토어를 사용하는 데이터 카탈로그를 참조하는 외부스키마 생성<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">schema</span> hive_schema</span><br><span class="line"><span class="keyword">from</span> hive metastore</span><br><span class="line"><span class="keyword">database</span> <span class="string">'hive_db'</span></span><br><span class="line">uri <span class="string">'172.10.10.10'</span> port <span class="number">99</span></span><br><span class="line">iam_role <span class="string">'arn:aws:iam::123456789012:role/MySpectrumRole'</span></span><br></pre></td></tr></table></figure><h2 id="02-external-table-생성"><a href="#02-external-table-생성" class="headerlink" title="02. external table 생성"></a>02. external table 생성</h2></li><li>데이터가 있는 S3 버킷 경로를 지정하여 external table 생성<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> spectrum.sales(</span><br><span class="line">salesid <span class="built_in">integer</span>,</span><br><span class="line">listid <span class="built_in">integer</span>,</span><br><span class="line">sellerid <span class="built_in">integer</span>,</span><br><span class="line">buyerid <span class="built_in">integer</span>,</span><br><span class="line">eventid <span class="built_in">integer</span>,</span><br><span class="line">dateid <span class="built_in">smallint</span>,</span><br><span class="line">qtysold <span class="built_in">smallint</span>,</span><br><span class="line">pricepaid <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">commission <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">saletime <span class="built_in">timestamp</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span></span><br><span class="line"><span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span></span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> textfile</span><br><span class="line">location <span class="string">'s3:// &lt;&lt; bucket 경로 &gt;&gt;'</span></span><br><span class="line"><span class="keyword">table</span> properties (<span class="string">'numRows'</span>=<span class="string">'172000'</span>);</span><br></pre></td></tr></table></figure></li><li>parquet file 경로를 지정하여 external table 생성<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> spectrum.sales(</span><br><span class="line">salesid <span class="built_in">integer</span>,</span><br><span class="line">listid <span class="built_in">integer</span>,</span><br><span class="line">sellerid <span class="built_in">integer</span>,</span><br><span class="line">buyerid <span class="built_in">integer</span>,</span><br><span class="line">eventid <span class="built_in">integer</span>,</span><br><span class="line">dateid <span class="built_in">smallint</span>,</span><br><span class="line">qtysold <span class="built_in">smallint</span>,</span><br><span class="line">pricepaid <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">commission <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">saletime <span class="built_in">timestamp</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span></span><br><span class="line"><span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span></span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> parquet</span><br><span class="line">location <span class="string">'s3:// &lt;&lt; bucket 경로 &gt;&gt;'</span></span><br></pre></td></tr></table></figure><h2 id="03-외부-테이블-파티셔닝"><a href="#03-외부-테이블-파티셔닝" class="headerlink" title="03. 외부 테이블 파티셔닝"></a>03. 외부 테이블 파티셔닝</h2></li><li>단일 파티션 분할<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> spectrum.sales_part <span class="keyword">add</span></span><br><span class="line"><span class="keyword">partition</span>(saledate=<span class="string">'2008-01-01'</span>) </span><br><span class="line">location <span class="string">'s3://awssampledbuswest2/tickit/spectrum/sales_partition/saledate=2008-01/'</span></span><br><span class="line"><span class="keyword">partition</span>(saledate=<span class="string">'2008-02-01'</span>) </span><br><span class="line">location <span class="string">'s3://awssampledbuswest2/tickit/spectrum/sales_partition/saledate=2008-02/'</span>;</span><br></pre></td></tr></table></figure></li><li>여러 파티션 분할<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> spectrum.sales_event(</span><br><span class="line">salesid <span class="built_in">integer</span>,</span><br><span class="line">listid <span class="built_in">integer</span>,</span><br><span class="line">sellerid <span class="built_in">integer</span>,</span><br><span class="line">buyerid <span class="built_in">integer</span>,</span><br><span class="line">eventid <span class="built_in">integer</span>,</span><br><span class="line">dateid <span class="built_in">smallint</span>,</span><br><span class="line">qtysold <span class="built_in">smallint</span>,</span><br><span class="line">pricepaid <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">commission <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">saletime <span class="built_in">timestamp</span>)</span><br><span class="line">partitioned <span class="keyword">by</span> (salesmonth <span class="built_in">char</span>(<span class="number">10</span>), <span class="keyword">event</span> <span class="built_in">integer</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span></span><br><span class="line"><span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'|'</span></span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> textfile</span><br><span class="line">location <span class="string">'s3://awssampledbuswest2/tickit/spectrum/salesevent/'</span></span><br><span class="line"><span class="keyword">table</span> properties (<span class="string">'numRows'</span>=<span class="string">'172000'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 파티션을 추가하려면 alter table을 이용</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> spectrum.sales_event <span class="keyword">add</span></span><br><span class="line"><span class="keyword">partition</span>(salesmonth=<span class="string">'2008-01'</span>, <span class="keyword">event</span>=<span class="string">'101'</span>) </span><br><span class="line">location <span class="string">'s3://awssampledbuswest2/tickit/spectrum/salesevent/salesmonth=2008-01/event=101/'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">partition</span>(salesmonth=<span class="string">'2008-01'</span>, <span class="keyword">event</span>=<span class="string">'102'</span>) </span><br><span class="line">location <span class="string">'s3://awssampledbuswest2/tickit/spectrum/salesevent/salesmonth=2008-01/event=102/'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">partition</span>(salesmonth=<span class="string">'2008-01'</span>, <span class="keyword">event</span>=<span class="string">'103'</span>) </span><br><span class="line">location <span class="string">'s3://awssampledbuswest2/tickit/spectrum/salesevent/salesmonth=2008-01/event=103/'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">partition</span>(salesmonth=<span class="string">'2008-02'</span>, <span class="keyword">event</span>=<span class="string">'101'</span>) </span><br><span class="line">location <span class="string">'s3://awssampledbuswest2/tickit/spectrum/salesevent/salesmonth=2008-02/event=101/'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">partition</span>(salesmonth=<span class="string">'2008-02'</span>, <span class="keyword">event</span>=<span class="string">'102'</span>) </span><br><span class="line">location <span class="string">'s3://awssampledbuswest2/tickit/spectrum/salesevent/salesmonth=2008-02/event=102/'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">partition</span>(salesmonth=<span class="string">'2008-02'</span>, <span class="keyword">event</span>=<span class="string">'103'</span>) </span><br><span class="line">location <span class="string">'s3://awssampledbuswest2/tickit/spectrum/salesevent/salesmonth=2008-02/event=103/'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">partition</span>(salesmonth=<span class="string">'2008-03'</span>, <span class="keyword">event</span>=<span class="string">'101'</span>) </span><br><span class="line">location <span class="string">'s3://awssampledbuswest2/tickit/spectrum/salesevent/salesmonth=2008-03/event=101/'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">partition</span>(salesmonth=<span class="string">'2008-03'</span>, <span class="keyword">event</span>=<span class="string">'102'</span>) </span><br><span class="line">location <span class="string">'s3://awssampledbuswest2/tickit/spectrum/salesevent/salesmonth=2008-03/event=102/'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">partition</span>(salesmonth=<span class="string">'2008-03'</span>, <span class="keyword">event</span>=<span class="string">'103'</span>) </span><br><span class="line">location <span class="string">'s3://awssampledbuswest2/tickit/spectrum/salesevent/salesmonth=2008-03/event=103/'</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="04-Select-data"><a href="#04-Select-data" class="headerlink" title="04. Select data"></a>04. Select data</h2><ul><li>가상 열 조회<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="string">"$path"</span>, <span class="string">"$size"</span></span><br><span class="line"><span class="keyword">from</span> spectrum.sales_part;</span><br><span class="line"></span><br><span class="line"> $path                                 | $size</span><br><span class="line"><span class="comment">---------------------------------------+-------</span></span><br><span class="line">s3://awssampledbuswest2/tickit/spectrum/sales_partition/saledate=2008-01/ |  1616</span><br><span class="line">s3://awssampledbuswest2/tickit/spectrum/sales_partition/saledate=2008-02/ |  1444</span><br><span class="line">s3://awssampledbuswest2/tickit/spectrum/sales_partition/saledate=2008-03/ |  1644</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Redshift-Spectrum-정리&quot;&gt;&lt;a href=&quot;#Redshift-Spectrum-정리&quot; class=&quot;headerlink&quot; title=&quot;Redshift Spectrum 정리&quot;&gt;&lt;/a&gt;Redshift Spectrum 정리&lt;/h1&gt;&lt;h2 id=&quot;01-Redshift-Spectrum-Schma-생성&quot;&gt;&lt;a href=&quot;#01-Redshift-Spectrum-Schma-생성&quot; class=&quot;headerlink&quot; title=&quot;01. Redshift Spectrum Schma 생성&quot;&gt;&lt;/a&gt;01. Redshift Spectrum Schma 생성&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;스팩트럼을 사용하기 위한 Schema 생성&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;external&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;schema&lt;/span&gt; spectrum &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;catalog&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;spectrumdb&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iam_role &lt;span class=&quot;string&quot;&gt;&#39;arn:aws:iam::123456789012:role/mySpectrumRole&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;external&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="AWS" scheme="https://megapost.io/categories/AWS/"/>
    
      <category term="Redshift" scheme="https://megapost.io/categories/AWS/Redshift/"/>
    
    
      <category term="AWS" scheme="https://megapost.io/tags/AWS/"/>
    
      <category term="Redshift" scheme="https://megapost.io/tags/Redshift/"/>
    
      <category term="Spectrum" scheme="https://megapost.io/tags/Spectrum/"/>
    
      <category term="parquet" scheme="https://megapost.io/tags/parquet/"/>
    
  </entry>
  
  <entry>
    <title>TB3000A (썬더볼트3 NVMe 외장 케이스) 개봉기</title>
    <link href="https://megapost.io/2020/03/25/tb3000a/"/>
    <id>https://megapost.io/2020/03/25/tb3000a/</id>
    <published>2020-03-25T02:12:18.000Z</published>
    <updated>2020-04-06T15:54:07.256Z</updated>
    
    <content type="html"><![CDATA[<p>기존 데스크탑은 Openstack 설치에 활용하기 위해 새로 구입한 맥북에 Windows를 설치 하려고 하던 중, 왠지 맥북에 Windows공간을 만드는 것이 아까워서 외장하드에 설치해볼까 해서 구매한 제품입니다.</p><p>결론적으론 아직도 설치를 못하고 삽질 중인데 ㅠㅠ 언젠간 해결이 됐으면 좋겠습니다. </p><p>(맥북프로 16인치 이후 버전부터 드라이버가 이상한건지 구성이 잘 안되네요.. 혹시 성공하신분 있으시면 알려주세요 ㅠㅠ)</p><a id="more"></a><p><img src="/images/20200325-TB3000A/001.jpg" alt=""></p><p>삼성 970Evo와 외장 케이스입니다. 썬더볼트 타입이기 때문에 성능은 잘 나오겠죠? 하지만 usb-c와 호환은 안됍니다.</p><p><img src="/images/20200325-TB3000A/002.jpg" alt=""></p><p>외장 케이스 박스 오픈…</p><p><img src="/images/20200325-TB3000A/003.jpg" alt=""></p><p>구성품은 파우치, 케이블, 외장케이스, 드라이버, 그리고 허술해보이는 방열판과 써멀패드가 들어있었습니다.</p><p><img src="/images/20200325-TB3000A/004.jpg" alt=""></p><p>드라이버는 옛날에 안경 볼트 조이라고 주던 그 드라이버입니다.<br>손에 맞지도 않고 품질도 별로라 바로 버려버리고 집에 있는 드라이버로 작업했네요.</p><p><img src="/images/20200325-TB3000A/005.jpg" alt=""></p><p>뚜껑을 편하게 열 수 있도록 스티커가 붙어있습니다.</p><p><img src="/images/20200325-TB3000A/006.jpg" alt=""></p><p>이건 보고 경악을 금치 못했는데, 고정할 수 있게 볼트를 조이는곳어 없이 그냥 덮으라는건가?</p><p><img src="/images/20200325-TB3000A/007.jpg" alt=""></p><p>ssd 개봉 모습입니다. 심플합니다.</p><p><img src="/images/20200325-TB3000A/008.jpg" alt=""></p><p>외장하드 케이스 뚜껑을 열어서</p><p><img src="/images/20200325-TB3000A/009.jpg" alt=""></p><p>SSD를 잘 넣고</p><p><img src="/images/20200325-TB3000A/010.jpg" alt=""></p><p>누른다음 위에 고정되도록 볼트만 조여주면 장착이 끝납니다.</p><p><img src="/images/20200325-TB3000A/011.jpg" alt=""></p><p>뚜껑을 덮기 전 잘 작동하는지 확인을 해보고..</p><p><img src="/images/20200325-TB3000A/012.jpg" alt=""></p><p>허술한 껌딱지를 붙여주고</p><p><img src="/images/20200325-TB3000A/013.jpg" alt=""></p><p>허술한 방열판을 그 위에 올려줍니다.</p><p>혹시나 방열판이 보드쪽에 밀려서 합선이 일어날까 걱정했는데 케이스 뚜껑을 덮으면 그런일은 일어나지 않을 것 같습니다.</p><p>근데 너무 허술합니다.</p><p><img src="/images/20200325-TB3000A/014.jpg" alt=""></p><p>케이스 뚜껑을 덮고 고정을 위해 볼트를 조여줍니다. </p><p>손 끝에 모든 감각을 동원해 토크 조절을 해야합니다. 조금이라도 힘을 더 줘서 돌리면 나사가 헛돌게 됩니다.</p><p>성능은 잘 나오는 것 같지만 생각보단 제품이 너무 허술해서 실망했네요.</p><p>이상 개봉기였습니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;기존 데스크탑은 Openstack 설치에 활용하기 위해 새로 구입한 맥북에 Windows를 설치 하려고 하던 중, 왠지 맥북에 Windows공간을 만드는 것이 아까워서 외장하드에 설치해볼까 해서 구매한 제품입니다.&lt;/p&gt;
&lt;p&gt;결론적으론 아직도 설치를 못하고 삽질 중인데 ㅠㅠ 언젠간 해결이 됐으면 좋겠습니다. &lt;/p&gt;
&lt;p&gt;(맥북프로 16인치 이후 버전부터 드라이버가 이상한건지 구성이 잘 안되네요.. 혹시 성공하신분 있으시면 알려주세요 ㅠㅠ)&lt;/p&gt;
    
    </summary>
    
    
      <category term="개봉기" scheme="https://megapost.io/categories/%EA%B0%9C%EB%B4%89%EA%B8%B0/"/>
    
    
      <category term="TB3000A" scheme="https://megapost.io/tags/TB3000A/"/>
    
      <category term="Thunderbolt3" scheme="https://megapost.io/tags/Thunderbolt3/"/>
    
      <category term="nvme" scheme="https://megapost.io/tags/nvme/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Ergonomic Mouse 개봉기</title>
    <link href="https://megapost.io/2020/03/12/microsoft-ergonomic/"/>
    <id>https://megapost.io/2020/03/12/microsoft-ergonomic/</id>
    <published>2020-03-12T13:18:27.000Z</published>
    <updated>2020-03-25T05:47:56.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="마이크로소프트-에고노믹-마우스-개봉기"><a href="#마이크로소프트-에고노믹-마우스-개봉기" class="headerlink" title="마이크로소프트 에고노믹 마우스 개봉기"></a>마이크로소프트 에고노믹 마우스 개봉기</h2><p>기존에 로지텍 MX Master를 사용중이었는데 마우스가 원인인지 아닌지 모르겠지만 요즘따라 너무 손목이 아파서 고민하던 와중 마이크로소프트 에고노믹 마우스가 평이 매우 좋아서 구매를 하게 되었습니다.</p><p>에고노믹 마우스도 두가지가 있던데 둥글둥글한 스컬프트 에고노믹 마우스가 있고 이번에 구매한 에고노믹 마우스가 있었습니다. 가격은 좀 나가지만 그래도 최근에 나온게 좋겠지 싶어서 최신상품으로 구매했습니다.</p><a id="more"></a><p><img src="/images/20200312-Microsoft-Ergonomic/001.jpg" alt=""></p><p>맨 처음 박스를 꺼낸 느낌은 “가볍다!” 였습니다. 박스 무게를 포함해도 MX Master보다 가벼웠던 것 같습니다. </p><p><img src="/images/20200312-Microsoft-Ergonomic/002.jpg" alt=""></p><p>간편하게 뜯을 수 있도록 포장을 해놓은것이 뭔가 고급스러워(?) 보였습니다.</p><p><img src="/images/20200312-Microsoft-Ergonomic/003.jpg" alt=""></p><p>패키지를 열면 마우스와 마우스가 잘 고정될 수 있도록 윗부분에 박스로 마감을 해놓은 모습이 보입니다.<br>박스 윗부분에 뭔가 들어있나 싶었는데 아무것도 없더라구요..</p><p><img src="/images/20200312-Microsoft-Ergonomic/004.jpg" alt=""></p><p>무광 재질이 정말 고급스러워 보입니다. 마우스는 정말 심플합니다. 그래서 더 마음에 드네요.</p><p><img src="/images/20200312-Microsoft-Ergonomic/006.jpg" alt=""></p><p>마우스를 박스에서 꺼낼때도 “가볍다.. 진짜…”. 맨날 무거운 마우스만 사용해서 더 그렇게 느꼈던 것 같습니다. 아무래도 유선이기 때문에 배터리같은게 없으니 더 그럴만도 합니다.</p><p><img src="/images/20200312-Microsoft-Ergonomic/007.jpg" alt=""></p><p>휠부분은 금속 재질로 되어있어서 고급스러워보입니다. </p><p><img src="/images/20200312-Microsoft-Ergonomic/008.jpg" alt=""></p><p>센서 부분은 파란색으로 빛납니다.<br>블루트랙 센서가 여러가지 재질의 바닥에서 사용이 가능하다고 하던데 시험삼에 핸드폰 액정 위에 올려놓고 써봐도 마우스가 튀거나 하지 않았습니다. 패드없이 아무곳에서나 사용해도 크게 불편함은 없을 것 같습니다.</p><p>무엇보다 가벼워서 손이 너무 편한 느낌입니다.</p><p>마우스도 바꿨으니 지긋지긋한 손목통증이 좀 없어졌으면 좋겠습니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;마이크로소프트-에고노믹-마우스-개봉기&quot;&gt;&lt;a href=&quot;#마이크로소프트-에고노믹-마우스-개봉기&quot; class=&quot;headerlink&quot; title=&quot;마이크로소프트 에고노믹 마우스 개봉기&quot;&gt;&lt;/a&gt;마이크로소프트 에고노믹 마우스 개봉기&lt;/h2&gt;&lt;p&gt;기존에 로지텍 MX Master를 사용중이었는데 마우스가 원인인지 아닌지 모르겠지만 요즘따라 너무 손목이 아파서 고민하던 와중 마이크로소프트 에고노믹 마우스가 평이 매우 좋아서 구매를 하게 되었습니다.&lt;/p&gt;
&lt;p&gt;에고노믹 마우스도 두가지가 있던데 둥글둥글한 스컬프트 에고노믹 마우스가 있고 이번에 구매한 에고노믹 마우스가 있었습니다. 가격은 좀 나가지만 그래도 최근에 나온게 좋겠지 싶어서 최신상품으로 구매했습니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="개봉기" scheme="https://megapost.io/categories/%EA%B0%9C%EB%B4%89%EA%B8%B0/"/>
    
    
      <category term="Microsoft" scheme="https://megapost.io/tags/Microsoft/"/>
    
      <category term="Mouse" scheme="https://megapost.io/tags/Mouse/"/>
    
      <category term="Ergonomic" scheme="https://megapost.io/tags/Ergonomic/"/>
    
  </entry>
  
  <entry>
    <title>Github blog 시작을 위한 Hexo 설정(Ubuntu 18.04 기준)</title>
    <link href="https://megapost.io/2020/03/08/hexo-setting/"/>
    <id>https://megapost.io/2020/03/08/hexo-setting/</id>
    <published>2020-03-07T15:31:15.000Z</published>
    <updated>2020-03-25T05:48:11.794Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HEXO-설치과정"><a href="#HEXO-설치과정" class="headerlink" title="HEXO 설치과정"></a><strong>HEXO 설치과정</strong></h2><p>Github blog를 시작하기 위해 처음에는 Jekyll을 사용하려고 했으나 생각보다(?) 사용방법이 불편했고 테마도 마음에 들지않아 알아보던 중 Hexo를 많이 사용하는 것 같아서 이번 기회에 설정을 해봤습니다.</p><hr><h3 id="01-Hexo설치"><a href="#01-Hexo설치" class="headerlink" title="01. Hexo설치"></a><strong>01. Hexo설치</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-cli -g</span></span><br><span class="line">loadDep:fsevents → resolv ▌ ╢████████████████████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░╟</span><br><span class="line">WARN engine fsevents@2.1.2: wanted: &#123;"node":"^8.16.0 || ^10.6.0 || &gt;=11.0.0"&#125; (current: &#123;"node":"8.1/usr/local/bin/hexo -&gt; /usr/local/lib/node_modules/hexo-cli/bin/hexo</span><br><span class="line">/usr/local/lib</span><br><span class="line">└── hexo-cli@3.1.0</span><br><span class="line"></span><br><span class="line">npm WARN optional Skipping failed optional dependency /hexo-cli/chokidar/fsevents:</span><br><span class="line">npm WARN notsup Not compatible with your operating system or architecture: fsevents@2.1.2</span><br></pre></td></tr></table></figure><a id="more"></a><p>nodejs 버전이 낮아서 그런지 경고가 나오는 것 같아서 확인해봤습니다.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node --version</span></span><br><span class="line">v8.10.0</span><br></pre></td></tr></table></figure><p>8.16.0 이상이 권장인 것 같아 nodejs 버전을 업그레이드 했습니다. 일단 기존 설치되어 있는 nodejs를 삭제하고</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt purge --auto-remove nodejs</span></span><br></pre></td></tr></table></figure><p>최신 nodejs로 업그레이드</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install -y nodejs</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> node --version</span></span><br><span class="line">v12.16.1</span><br></pre></td></tr></table></figure><p>다시한번 Hexo-cli 설치</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-cli -g --no-optional</span></span><br><span class="line">/usr/bin/hexo -&gt; /usr/lib/node_modules/hexo-cli/bin/hexo</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.1.2 (node_modules/hexo-cli/node_modules/chokidar/node_modules/fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.2: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"linux","arch":"x64"&#125;)</span><br><span class="line"></span><br><span class="line">+ hexo-cli@3.1.0</span><br><span class="line">added 74 packages from 319 contributors in 11.895s</span><br></pre></td></tr></table></figure><p>version에 의한 경고는 사라졌습니다.</p><hr><h3 id="02-기본-프로젝트-생성"><a href="#02-기본-프로젝트-생성" class="headerlink" title="02. 기본 프로젝트 생성"></a><strong>02. 기본 프로젝트 생성</strong></h3><p>hexo init 으로 기본 프로젝트 생성합니다. (root계정이라도 npm install 할때 sudo 를 앞에 붙여줘야 정상적으로 설치가 가능했습니다.. 이것때문에 삽질을 좀;)</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init project_name</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> project_name</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo npm install</span></span><br></pre></td></tr></table></figure><hr><h3 id="03-생성된-블로그-로컬에서-테스트"><a href="#03-생성된-블로그-로컬에서-테스트" class="headerlink" title="03. 생성된 블로그 로컬에서 테스트"></a><strong>03. 생성된 블로그 로컬에서 테스트</strong></h3><p>로컬에서 서버를 띄워 만들어진 블로그를 확인해볼 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo server</span></span><br></pre></td></tr></table></figure><p>서버가 구동되면 브라우저를 통해 접속해볼 수 있습니다.</p><ul><li><a href="http://localhost:4000">http://localhost:4000</a></li></ul><hr><h3 id="04-github-자동-배포를-위한-설정"><a href="#04-github-자동-배포를-위한-설정" class="headerlink" title="04. github 자동 배포를 위한 설정"></a><strong>04. github 자동 배포를 위한 설정</strong></h3><p>_config.yaml 파일을 열어 아래 설정을 작성하고 저장합니다.</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;&lt;배포할 자신의 github 주소&gt;&gt;</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>deploy plugin 설치</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure><p>github에 배포. -g옵션을 줘야 내부 소스를 통해 리소스를 생성해 배포합니다.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy -g</span></span><br></pre></td></tr></table></figure><p>deploy를 통해 배포를 했으나 페이지가 없데이트 되지 않을 경우 clean 이후 다시 배포를 해봅니다.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy -g</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HEXO-설치과정&quot;&gt;&lt;a href=&quot;#HEXO-설치과정&quot; class=&quot;headerlink&quot; title=&quot;HEXO 설치과정&quot;&gt;&lt;/a&gt;&lt;strong&gt;HEXO 설치과정&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Github blog를 시작하기 위해 처음에는 Jekyll을 사용하려고 했으나 생각보다(?) 사용방법이 불편했고 테마도 마음에 들지않아 알아보던 중 Hexo를 많이 사용하는 것 같아서 이번 기회에 설정을 해봤습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;01-Hexo설치&quot;&gt;&lt;a href=&quot;#01-Hexo설치&quot; class=&quot;headerlink&quot; title=&quot;01. Hexo설치&quot;&gt;&lt;/a&gt;&lt;strong&gt;01. Hexo설치&lt;/strong&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; npm install hexo-cli -g&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;loadDep:fsevents → resolv ▌ ╢████████████████████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░╟&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WARN engine fsevents@2.1.2: wanted: &amp;#123;&quot;node&quot;:&quot;^8.16.0 || ^10.6.0 || &amp;gt;=11.0.0&quot;&amp;#125; (current: &amp;#123;&quot;node&quot;:&quot;8.1/usr/local/bin/hexo -&amp;gt; /usr/local/lib/node_modules/hexo-cli/bin/hexo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/local/lib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── hexo-cli@3.1.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm WARN optional Skipping failed optional dependency /hexo-cli/chokidar/fsevents:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm WARN notsup Not compatible with your operating system or architecture: fsevents@2.1.2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://megapost.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://megapost.io/tags/Hexo/"/>
    
      <category term="nodejs" scheme="https://megapost.io/tags/nodejs/"/>
    
  </entry>
  
</feed>
